{
    "openapi" : "3.0.1",
    "info" : {
      "title" : "Event Portal",
      "description" : "REST API Concepts\n\nSolace PubSub+ Event Portal provides REST APIs that you can use to manage your data in PubSub+ Cloud. \nThe REST APIs allow you to model your event-driven architectures from your own client applications.\n\nThe following document describes the public REST APIs available for use in Event Portal 2.0. Objects created in this \nversion will not be available in Event Portal 1.0. APIs that display (Beta) in their summary are provided as-is and \nare subject to change or removal. They may not be of the quality expected for generally available APIs and have no \nguaranteed forward compatibility with the generally available version of the API.\n\n",
      "version" : "2.0.27"
    },
    "servers" : [ {
      "url" : "https://api.solace.cloud",
      "description" : "Solace PubSub+ Cloud"
    } ],
    "security" : [ {
      "APIToken" : [ ]
    } ],
    "tags" : [ {
      "name" : "Application Domain Operations"
    }, {
      "name" : "Application Domains"
    }, {
      "name" : "Applications"
    }, {
      "name" : "Audit Results"
    }, {
      "name" : "BFF Application Versions Frontend"
    }, {
      "name" : "Configuration Types"
    }, {
      "name" : "Configurations"
    }, {
      "name" : "Consumers"
    }, {
      "name" : "Custom Attribute Definitions"
    }, {
      "name" : "Enums"
    }, {
      "name" : "Environments"
    }, {
      "name" : "Event API Products"
    }, {
      "name" : "Event APIs"
    }, {
      "name" : "Event Management Agents"
    }, {
      "name" : "Event Meshes"
    }, {
      "name" : "Events"
    }, {
      "name" : "Messaging Service Scan Data"
    }, {
      "name" : "Messaging Service Scan Logs"
    }, {
      "name" : "Messaging Service Scans"
    }, {
      "name" : "Messaging Services"
    }, {
      "name" : "Schemas"
    }, {
      "name" : "States"
    }, {
      "name" : "Topic Domains"
    } ],
    "paths" : {
      "/api/v2/architecture/enums" : {
        "get" : {
          "tags" : [ "Enums" ],
          "summary" : "Get a list of enumerations",
          "description" : "Use this API to get a list of enumerations based on certain criteria.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEnums",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of enumerations to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "The IDs of the enumerations.",
            "required" : false,
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "description" : "The application domain ID of the enumerations.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainIds",
            "in" : "query",
            "description" : "Match only enumerations in the given application domain ids.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "names",
            "in" : "query",
            "description" : "The names of the enumerations.",
            "required" : false,
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "shared",
            "in" : "query",
            "description" : "Match only with shared or unshared enumerations.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of enumerations and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Enums" ],
          "summary" : "Create an enumeration",
          "description" : "An enumeration is a bounded variable with a limited set of literal values. Use this API to create an enumeration to define acceptable values for a level in a topic address or topic domain.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:create:*` ]",
          "operationId" : "createEnum",
          "requestBody" : {
            "description" : "Enumeration description.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicAddressEnum"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an enumeration. The newly saved enumeration is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/events" : {
        "get" : {
          "tags" : [ "Events" ],
          "summary" : "Get a list of events",
          "description" : "Use this API to get a list of events that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEvents",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of events to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of the event to match on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "shared",
            "in" : "query",
            "description" : "Match only with shared or unshared events.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "brokerType",
            "in" : "query",
            "description" : "Match only events with the given broker type",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "description" : "Match only events in the given application domain.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainIds",
            "in" : "query",
            "description" : "Match only events in the given application domain ids.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only events with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of events and the accompanying metadata.",
              "content" : {
                "*/*" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Events" ],
          "summary" : "Create an event",
          "description" : "Events are the primary building block of an event-driven architecture. Applications publish and subscribe to events and events reference schemas.  In the Event Portal, an event is a type of event as opposed to a specific event instance.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:create:*` ]",
          "operationId" : "createEvent",
          "requestBody" : {
            "description" : "The event requires a name and an application domain ID.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event. The newly saved event is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/states" : {
        "get" : {
          "tags" : [ "States" ],
          "summary" : "Get a list of lifecycle states",
          "description" : "Use this API to get a list of lifecycle states that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getStates",
          "responses" : {
            "200" : {
              "description" : "Get a list of lifecycle states and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StatesResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/schemas" : {
        "get" : {
          "tags" : [ "Schemas" ],
          "summary" : "Get a list of schemas",
          "description" : "Use this API to get a list of schemas that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getSchemas",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of schemas to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of the schema to match on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "shared",
            "in" : "query",
            "description" : "Match only with shared or unshared schemas.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "description" : "Match only schemas in the given application domain.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "schemaType",
            "in" : "query",
            "description" : "Match only schemas with the given schema type",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainIds",
            "in" : "query",
            "description" : "Match only schemas in the given application domain ids.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only schemas with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of schemas and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemasResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Schemas" ],
          "summary" : "Create a schema",
          "description" : "To model your event-driven architecture, schemas are a fundamental building block for modelling the payloads of the events flowing through your system. Use this API to create schemas that can later be referenced by events.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:create:*` ]",
          "operationId" : "createSchema",
          "requestBody" : {
            "description" : "The schema requires a name, an application domain, a schema type and a content type.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaObject"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a schema. The newly saved schema is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApis" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get a List of Event APIs",
          "description" : "Use this API to get a list of event APIs that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEventApis",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of event APIs to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of the event API to match on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only event APIs with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "description" : "Match only event APIs in the given application domain.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainIds",
            "in" : "query",
            "description" : "Match only event APIs in the given application domains.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "eventApiVersionIds",
            "in" : "query",
            "description" : "Match only event APIs in the given event API version ids.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "availableWithinApplicationDomainIds",
            "in" : "query",
            "description" : "Additionally match any shared event APIs in any application domain.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "shared",
            "in" : "query",
            "description" : "Match only with shared or unshared event APIs.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "brokerType",
            "in" : "query",
            "description" : "Match only event APIs with the given broker type.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of event APIs and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApisResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Create an Event API",
          "description" : "Use this API to create an event API.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:create:*` ]",
          "operationId" : "createEventApi",
          "requestBody" : {
            "description" : "The event API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApi"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event API. The newly saved event API is returned in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/consumers" : {
        "get" : {
          "tags" : [ "Consumers" ],
          "summary" : "Get a list of consumers",
          "description" : "Use this API to get a list of consumers that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getConsumers",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of consumers to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "applicationVersionIds",
            "in" : "query",
            "description" : "Match only consumers with the given application version IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only consumers with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of consumers and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConsumersResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Consumers" ],
          "summary" : "Create a consumer",
          "description" : "Use this API to create a consumer.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "createConsumer",
          "requestBody" : {
            "description" : "The consumer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Consumer"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a consumer. Returns the newly saved consumer in the response body.",
              "content" : {
                "*/*" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConsumerResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/enums/{id}" : {
        "get" : {
          "tags" : [ "Enums" ],
          "summary" : "Get an enumeration",
          "description" : "Use this API to get a single enumeration by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:get:*` ]",
          "operationId" : "getEnum",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the enumeration.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The enumeration.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Enums" ],
          "summary" : "Delete an enumeration",
          "description" : "Use this API to delete an enumeration. The enumeration must not have any versions or else it cannot be deleted.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:delete:*` ]",
          "operationId" : "deleteEnum",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the enumeration.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned if the delete was successful."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "If the enumeration did not exist."
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Enums" ],
          "summary" : "Update an enumeration",
          "description" : "Use this API to update an enumeration object. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:update:*` ]",
          "operationId" : "updateEnum",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the enumeration.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Enumeration updates.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicAddressEnum"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "Updated an enumeration. The newly saved enumeration is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventMeshes" : {
        "get" : {
          "tags" : [ "Event Meshes" ],
          "summary" : "Get a list of event meshes",
          "description" : "Use this API to get a list of event meshes that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `modeled_event_mesh:get:*` ]",
          "operationId" : "getEventMeshes",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of event meshes to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of the event mesh to match on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "environmentId",
            "in" : "query",
            "description" : "Match only event meshes in the given environment",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of event meshes and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventMeshesResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Event Meshes" ],
          "summary" : "Create an event mesh",
          "description" : "Create an event mesh.",
          "operationId" : "createEventMesh",
          "requestBody" : {
            "description" : "Event mesh.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventMesh"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event mesh. The newly saved event mesh is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventMeshResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/events/{id}" : {
        "get" : {
          "tags" : [ "Events" ],
          "summary" : "Get an event",
          "description" : "Use this API to get a single event by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:get:*` ]",
          "operationId" : "getEvent",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The event.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Events" ],
          "summary" : "Delete an event",
          "description" : "Use this API to delete an event.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:delete:*` ]",
          "operationId" : "deleteEvent",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Events" ],
          "summary" : "Update an event",
          "description" : "Use this API to update an event. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:update:*` ]",
          "operationId" : "updateEvent",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Event"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/topicDomains" : {
        "get" : {
          "tags" : [ "Topic Domains" ],
          "summary" : "Get a list of the topic domains",
          "description" : "Use this API to get a list of topic domains that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getTopicDomains",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of topic domains to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only topic domains with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "brokerType",
            "in" : "query",
            "description" : "Match only topic domains with the given brokerType.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainIds",
            "in" : "query",
            "description" : "Match only topic domains with the given application domain ids separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of topic domains and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicDomainsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Topic Domains" ],
          "summary" : "Create a topic domain",
          "description" : "Topic Domains govern the format of topic addresses within an application domain<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `topic_domain:create:*` ]",
          "operationId" : "createTopicDomain",
          "requestBody" : {
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicDomain"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a topic domain. Returns the newly saved topic domain in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicDomainResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/environments" : {
        "get" : {
          "tags" : [ "Environments" ],
          "summary" : "Get a list of environments",
          "description" : "Use this API to get a list of all environments.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEnvironments",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of environments to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "like",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of environments and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvironmentsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/enumVersions" : {
        "get" : {
          "tags" : [ "Enums" ],
          "summary" : "Get a list of enumeration versions",
          "description" : "Use this API to get a list of enumeration versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEnumVersions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of enumeration versions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "enumIds",
            "in" : "query",
            "description" : "Match only enumeration versions of these enumeration IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only enumeration versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of enumeration versions and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Enums" ],
          "summary" : "Create an enumeration version",
          "description" : "Create an enumeration version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:update:*` ]",
          "operationId" : "createEnumVersion",
          "requestBody" : {
            "description" : "Enumeration version description with its values.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicAddressEnumVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an enumeration version and its values. The newly saved enumeration version is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applications" : {
        "get" : {
          "tags" : [ "Applications" ],
          "summary" : "Get a list of applications",
          "description" : "Use this API to get a list of applications that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getApplications",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of applications to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of the application to match on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "description" : "Match only applications in the given application domain.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only applications with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          }, {
            "name" : "applicationType",
            "in" : "query",
            "description" : "Match only applications with the given applicationType.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of applications and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Applications" ],
          "summary" : "Create an application",
          "description" : "To model your event-driven architecture, applications are a fundamental building block for modelling the producers and consumers of events. Use this API to create applications and model the events they produce and consume.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:create:*` ]",
          "operationId" : "createApplication",
          "requestBody" : {
            "description" : "Applications have a name and live within an application domain. Events can be added to the application as produced or consumed.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an application. Returns the newly saved application in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/schemas/{id}" : {
        "get" : {
          "tags" : [ "Schemas" ],
          "summary" : "Get a schema",
          "description" : "Use this API to get a single schema by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:get:*` ]",
          "operationId" : "getSchema",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the schema.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The schema.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Schemas" ],
          "summary" : "Delete a schema",
          "description" : "Use this API to delete a schema. The schema must not be in use by any events else it cannot be deleted.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:delete:*` ]",
          "operationId" : "deleteSchema",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the schema.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Schemas" ],
          "summary" : "Update a schema",
          "description" : "Update a schema.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:update:*` ]",
          "operationId" : "updateSchema",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the schema.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The schema requires a name, an application domain, a schema type and a content type.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaObject"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "Updated a schema. The newly saved schema is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/auditResults" : {
        "get" : {
          "tags" : [ "Audit Results" ],
          "summary" : "Get a list of audit results",
          "description" : "This provides a list of audit results for the given event mesh and/or event brokers.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `audit:read` ]",
          "operationId" : "listAuditResults",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of audit records to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "eventBrokerIds",
            "in" : "query",
            "description" : "Match only audit records belonging to the given event brokers.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "eventMeshId",
            "in" : "query",
            "description" : "Match only audit records belonging to the given event mesh.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "auditEntityTypes",
            "in" : "query",
            "description" : "Match only audit records belonging to the given entity types.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
              }
            }
          }, {
            "name" : "statuses",
            "in" : "query",
            "description" : "Match only audit records with the given statuses.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "designerOnly", "match", "partialMatch", "runtimeOnly" ]
              }
            }
          }, {
            "name" : "startsWith",
            "in" : "query",
            "description" : "Match only audit records with identifiers starting with the given value.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "contains",
            "in" : "query",
            "description" : "Match audit records with identifiers containing the given value.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending. Sorting is supported for status and identifier.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of audit records and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AuditResultsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventVersions" : {
        "get" : {
          "tags" : [ "Events" ],
          "summary" : "Get a list of event versions",
          "description" : "Use this API to get a list of event versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEventVersions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of event versions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "eventIds",
            "in" : "query",
            "description" : "Match only event versions of these event IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only event versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "messagingServiceIds",
            "in" : "query",
            "description" : "Match only event versions with the given messaging service IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of event versions and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Events" ],
          "summary" : "Create an event version",
          "description" : "Create an event version<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:update:*` ]",
          "operationId" : "createEventVersion",
          "requestBody" : {
            "description" : "App version request body description",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event version. Returns the newly saved event version in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/schemaVersions" : {
        "get" : {
          "tags" : [ "Schemas" ],
          "summary" : "Get a list of schema versions",
          "description" : "Use this API to get a list of schema versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getSchemaVersions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of schema versions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "schemaIds",
            "in" : "query",
            "description" : "Match only schema versions of these schema IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only schema versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of schema versions and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Schemas" ],
          "summary" : "Create a schema version",
          "description" : "Creates a schema version<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:update:*` ]",
          "operationId" : "createSchemaVersion",
          "requestBody" : {
            "description" : "schema version details",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a schema version. The newly saved schema version is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/configurations" : {
        "get" : {
          "tags" : [ "Configurations" ],
          "summary" : "(Beta) Get a list of configurations",
          "description" : "Use this API to get a list of configurations that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_configuration:read` ]",
          "operationId" : "getConfigurations",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of configurations to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "eventBrokerIds",
            "in" : "query",
            "description" : "Match only configurations with the given messaging service IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only configurations with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "configurationTypes",
            "in" : "query",
            "description" : "Match only configurations with the given configuration type names separated by commas.<br>Refer <a href=\"/cloud/reference/getconfigurationtypes\">here</a> for details on configuration types.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "entityTypes",
            "in" : "query",
            "description" : "Match only configurations with the given entity type values separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "entityIds",
            "in" : "query",
            "description" : "Match only configurations with the given entity IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of configurations and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConfigurationsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApis/{id}" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get an Event API",
          "description" : "Use this API to get a single event API by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:get:*` ]",
          "operationId" : "getEventApi",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The event API.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Delete an Event API",
          "description" : "Use this API to delete an event API.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:delete:*` ]",
          "operationId" : "deleteEventApi",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Update an Event API",
          "description" : "Use this API to update an event API. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:update:*` ]",
          "operationId" : "updateEventApi",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event API.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApi"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event API.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/consumers/{id}" : {
        "get" : {
          "tags" : [ "Consumers" ],
          "summary" : "Get a consumer",
          "description" : "Use this API to get a single consumer by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:get:*` ]",
          "operationId" : "getConsumer",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the consumer.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The consumer.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConsumerResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Consumers" ],
          "summary" : "Delete a consumer",
          "description" : "Use this API to delete a consumer.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "deleteConsumer",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the consumer",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Consumers" ],
          "summary" : "Update a consumer",
          "description" : "Use this API to update a consumer.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "updateConsumer",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the consumer.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The consumer.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Consumer"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "Updated a consumer. Returns the newly saved consumer in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConsumerResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiVersions" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get a List of Event API Versions",
          "description" : "Use this API to get a list of event API versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEventApiVersions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of results to return in one page of results.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get results from based on the page size.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "eventApiIds",
            "in" : "query",
            "description" : "Match only event API versions of these event API IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match event API versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "A list of additional entities to include in the response.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "parent"
          }, {
            "name" : "stateId",
            "in" : "query",
            "description" : "Match event API versions with the given state ID.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of event API versions.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Create an Event API Version",
          "description" : "Use this API to create an event API version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:update:*` ]",
          "operationId" : "createEventApiVersion",
          "requestBody" : {
            "description" : "Event API version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event API version. Returns the newly saved event API version in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProducts" : {
        "get" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Get a List of Event API Products",
          "description" : "Use this API to get a list of Event API Products that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEventApiProducts",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of Event API Products to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "brokerType",
            "in" : "query",
            "description" : "Match only Event API Products with the given broken type.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name of the Event API Product to match on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only Event API Products with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "applicationDomainId",
            "in" : "query",
            "description" : "Match only Event API Products in the given application domain.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "applicationDomainIds",
            "in" : "query",
            "description" : "Match only Event API Products in the given application domains.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "shared",
            "in" : "query",
            "description" : "Match only with shared or unshared Event API Products.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of Event API Products and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Create an Event API Product",
          "description" : "Use this API to create an Event API Product.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:create:*` ]",
          "operationId" : "createEventApiProduct",
          "requestBody" : {
            "description" : "The Event API Product.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiProduct"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an Event API Product. The newly saved Event API Product is returned in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventMeshes/{id}" : {
        "get" : {
          "tags" : [ "Event Meshes" ],
          "summary" : "Get an event mesh",
          "description" : "Get a single event mesh by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `modeled_event_mesh:get:{id}` ]",
          "operationId" : "getEventMesh",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event mesh.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The event mesh.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventMeshResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Event Meshes" ],
          "summary" : "Delete an event mesh",
          "description" : "Use this API to delete an event mesh.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `modeled_event_mesh:delete:*` ]",
          "operationId" : "deleteEventMesh",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event mesh.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Event Meshes" ],
          "summary" : "Update an event mesh",
          "description" : "Use this API to update an event mesh. You only need to specify the fields that need to be updated.",
          "operationId" : "updateEventMesh",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event mesh to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event mesh.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventMesh"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event mesh.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventMeshResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServices" : {
        "get" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Get a list of messaging services",
          "description" : "Use this API to get a list of messaging services that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:read` ]",
          "operationId" : "getMessagingServices",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of messaging services to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "The IDs of the messaging services.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "messagingServiceType",
            "in" : "query",
            "description" : "Match only messaging services of the given type, options are: solace, kafka.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "runtimeAgentId",
            "in" : "query",
            "description" : "Match only messaging services in the given runtimeAgentId",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "eventMeshId",
            "in" : "query",
            "description" : "Match only messaging services in the given eventMeshId",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "eventManagementAgentId",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of messaging services and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServicesResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Create a messaging service",
          "description" : "Use this API to create a messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
          "operationId" : "createMessagingService",
          "requestBody" : {
            "description" : "The messaging service.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a messaging service. The newly saved messaging service is returned in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/environments/{id}" : {
        "get" : {
          "tags" : [ "Environments" ],
          "summary" : "Get an environment",
          "description" : "Use this API to get a single environment by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEnvironment",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the environment.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The environment.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EnvironmentResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/enumVersions/{id}" : {
        "delete" : {
          "tags" : [ "Enums" ],
          "summary" : "Delete an enumeration version",
          "description" : "Use this API to delete an enumeration version. The version must not be in use by any events else it cannot be deleted. This also deletes the version's values.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:update:*` ]",
          "operationId" : "deleteEnumVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the enumeration version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned if the delete was successful."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "If the enumeration version did not exist."
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Enums" ],
          "summary" : "Update an enumeration version",
          "description" : "Use this API to update an enumeration version. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:update:*` ]",
          "operationId" : "updateEnumVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the enumeration version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The enumeration version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TopicAddressEnumVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated enumeration version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applications/{id}" : {
        "get" : {
          "tags" : [ "Applications" ],
          "summary" : "Get an application",
          "description" : "Use this API to get a single application by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:get:*` ]",
          "operationId" : "getApplication",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the application.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The application.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Applications" ],
          "summary" : "Delete an application",
          "description" : "Use this API to delete an application.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:delete:*` ]",
          "operationId" : "deleteApplication",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the application",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Applications" ],
          "summary" : "Update an application",
          "description" : "Use this API to update an application. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "updateApplication",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the application to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The application.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Application"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated application.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/topicDomains/{id}" : {
        "get" : {
          "tags" : [ "Topic Domains" ],
          "summary" : "Get a topic domain",
          "description" : "Use this API to get a single topic domain by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `topic_domain:get:*` ]",
          "operationId" : "getTopicDomain",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the topic domain.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The topic domain.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicDomainResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Topic Domains" ],
          "summary" : "Delete a topic domain",
          "description" : "Use this API to delete a topic domain.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `topic_domain:delete:*` ]",
          "operationId" : "deleteTopicDomain",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the topic domain",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned.",
              "content" : {
                "*/*" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicDomainResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationDomains" : {
        "get" : {
          "tags" : [ "Application Domains" ],
          "summary" : "Get a list of the application domains",
          "description" : "Use this API to get a list of application domains that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getApplicationDomains",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of application domains to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "name",
            "in" : "query",
            "description" : "Name to be used to match the application domain.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only application domains with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Specify extra data to be included, options are: stats",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of application domains and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationDomainsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Application Domains" ],
          "summary" : "Create an application domain",
          "description" : "To help keep your event-driven architecture organized, use application domains to create namespaces for your applications, events and schemas.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:create:*` ]",
          "operationId" : "createApplicationDomain",
          "requestBody" : {
            "description" : "Application domains have a name and topic domain.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationDomain"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created. The newly saved application domain is returned in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationDomainResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventVersions/{id}" : {
        "get" : {
          "tags" : [ "Events" ],
          "summary" : "Get an event version",
          "description" : "Use this API to get a single event version by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:get:*` ]",
          "operationId" : "getEventVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The event version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Events" ],
          "summary" : "Delete an event version",
          "description" : "Use this API to delete an event version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:update:*` ]",
          "operationId" : "deleteEventVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Events" ],
          "summary" : "Update an event version",
          "description" : "Use this API to update an event version. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:update:*` ]",
          "operationId" : "updateEventVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event version.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/configurationTypes" : {
        "get" : {
          "tags" : [ "Configuration Types" ],
          "summary" : "(Beta) Get a list of configuration types",
          "description" : "Use this API to get a list of configuration types that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_configuration:read` ]",
          "operationId" : "getConfigurationTypes",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of configuration types to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only configuration types with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "names",
            "in" : "query",
            "description" : "Match only configuration types with the given names separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "associatedEntityTypes",
            "in" : "query",
            "description" : "Match only configuration types with the given associated entity type values separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "brokerType",
            "in" : "query",
            "description" : "Match only configuration types with the given broker type.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of configuration types and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConfigurationTypesResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/configurations/{id}" : {
        "get" : {
          "tags" : [ "Configurations" ],
          "summary" : "(Beta) Get a configuration",
          "description" : "Use this API to get a single configuration by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_configuration:read` ]",
          "operationId" : "getConfiguration",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the configuration.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The configuration.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConfigurationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationVersions" : {
        "get" : {
          "tags" : [ "Applications" ],
          "summary" : "Get a list of application versions",
          "description" : "Use this API to get a list of application versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getApplicationVersions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of application versions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "applicationIds",
            "in" : "query",
            "description" : "Match only application versions of these application IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only application versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "messagingServiceIds",
            "in" : "query",
            "description" : "Match only application versions with the given messaging service IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of application versions and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Applications" ],
          "summary" : "Create an application version",
          "description" : "Create an application version<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "createApplicationVersion",
          "requestBody" : {
            "description" : "App version request body description",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an application version. Returns the newly saved application version in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/schemaVersions/{id}" : {
        "delete" : {
          "tags" : [ "Schemas" ],
          "summary" : "Delete a schema version",
          "description" : "Use this API to delete a schema version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:update:*` ]",
          "operationId" : "deleteSchemaVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the schema version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Schemas" ],
          "summary" : "Update a schema version",
          "description" : "Use this API to update a schema version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:update:*` ]",
          "operationId" : "updateSchemaVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the schema version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SchemaVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The schema version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventManagementAgents" : {
        "get" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Get a list of EMAs",
          "description" : "Use this API to get a list of EMAs that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
          "operationId" : "getEventManagementAgents",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of EMAs to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "The IDs of the EMAs.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "createdBy",
            "in" : "query",
            "description" : "Match only EMAs created by this user",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "eventManagementAgentRegionId",
            "in" : "query",
            "description" : "Match only EMAs in the given EMA-Region",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Specify extra data to be included, options are: referencedByMessagingServiceIds.\n<br>Replacement: Use expand instead.\n<br>Reason: The change is to align with the API specification design.\n<br>Removal Date: 2024-11-03 18:00:00.000.\n",
            "required" : false,
            "deprecated" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "expand",
            "in" : "query",
            "description" : "Specify extra data to be included, options are: referencedByMessagingServiceIds.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of EMAs and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventManagementAgentsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Create an EMA object",
          "description" : "Use this API to create an EMA object.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:write` ]",
          "operationId" : "createEventManagementAgent",
          "requestBody" : {
            "description" : "The EMA object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventManagementAgent"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an EMA. The newly saved EMA object is returned in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventManagementAgentResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProducts/{id}" : {
        "get" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Get an Event API Product",
          "description" : "Use this API to get a single Event API Product by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:get:*` ]",
          "operationId" : "getEventApiProduct",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the Event API Product.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The Event API Product.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Delete an Event API Product",
          "description" : "Use this API to delete an Event API Product.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:delete:*` ]",
          "operationId" : "deleteEventApiProduct",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the Event API Product.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Update an Event API Product",
          "description" : "Use this API to update an Event API Product. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "updateEventApiProduct",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the Event API Product to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The Event API Product.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiProduct"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated Event API Product.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServiceScans" : {
        "get" : {
          "tags" : [ "Messaging Service Scans" ],
          "summary" : "Get a list of messaging service scans",
          "description" : "Use this API to get a list of messaging service scans that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
          "operationId" : "getMessagingServiceScans",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of messaging service scans to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "The IDs of the messaging service scans.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "messagingServiceId",
            "in" : "query",
            "description" : "Match only messaging service scans in the given messagingService",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "eventMeshId",
            "in" : "query",
            "description" : "Match only messaging service scans in the given eventMeshId",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of messaging service scans and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceScansResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServices/{id}" : {
        "get" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Get a messaging service",
          "description" : "Use this API to get a single messaging service by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:read` ]",
          "operationId" : "getMessagingService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The messaging service.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Delete a messaging service",
          "description" : "Use this API to delete a messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
          "operationId" : "deleteMessagingService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Update a messaging service",
          "description" : "Use this API to update a messaging service. You only need to specify the fields that need to be updated. However, if you want to update anything under subObjects (i.e. anything inside messagingServiceConnections object), you need to provide the original messagingServiceConnections with the updated fields instead of just providing the changed fields.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
          "operationId" : "updateMessagingService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The messaging service.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingService"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated messaging service.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/ui/applicationVersions" : {
        "get" : {
          "tags" : [ "BFF Application Versions Frontend" ],
          "summary" : "Get a list of application versions",
          "description" : "Use this API to get a list of application versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getApplicationVersionsForFrontend",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of application versions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "applicationIds",
            "in" : "query",
            "description" : "Match only application versions of these application IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match only application versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "messagingServiceIds",
            "in" : "query",
            "description" : "Match only application versions with the given messaging service IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of application versions and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationVersionsFrontendResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProductVersions" : {
        "get" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Get a List of Event API Product Versions",
          "description" : "Use this API to get a list of Event API Product versions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getEventApiProductVersions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of results to return in one page of results.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get results from based on the page size.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "eventApiProductIds",
            "in" : "query",
            "description" : "Match only Event API Product versions of these Event API Product IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match Event API Product versions with the given IDs, separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "A list of additional entities to include in the response.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "parent"
          }, {
            "name" : "stateId",
            "in" : "query",
            "description" : "Match Event API Product versions with the given state ID.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "messagingServiceId",
            "in" : "query",
            "description" : "Match Event API Product versions with the given messagingServiceId.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "clientAppId",
            "in" : "query",
            "description" : "Match Event API Product versions with the given clientAppId.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "shared",
            "in" : "query",
            "description" : "Match Event API Product versions with the parent objects shared setting.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "latest",
            "in" : "query",
            "description" : "Only return the latest version of Event API Products.",
            "required" : false,
            "schema" : {
              "type" : "boolean"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of Event API Product versions.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Create an Event API Product Version",
          "description" : "Use this API to create an Event API Product version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "createEventApiProductVersion",
          "requestBody" : {
            "description" : "Event API Product version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiProductVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an Event API Product version. Returns the newly saved Event API Product version in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/enumVersions/{id}/state" : {
        "patch" : {
          "tags" : [ "Enums" ],
          "summary" : "Update the state of an enumeration version",
          "description" : "Use this API to update the state of an enumeration version. You only need to specify the target stateId field.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:update_state:*` ]",
          "operationId" : "updateEnumVersionState",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the enumeration version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The state object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the enumeration version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationDomains/{id}" : {
        "get" : {
          "tags" : [ "Application Domains" ],
          "summary" : "Get an application domain",
          "description" : "Use this API to get a single application domain by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:get:*` ]",
          "operationId" : "getApplicationDomain",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the application domain.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Specify extra data to be included, options are: stats",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The application domain.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationDomainResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Application Domains" ],
          "summary" : "Delete an application domain",
          "description" : "Use this API to delete an application domain. This action also deletes all applications, events, and schemas in the application domain. You cannot undo this operation.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:delete:*` ]",
          "operationId" : "deleteApplicationDomain",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the application domain.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Application Domains" ],
          "summary" : "Update an application domain",
          "description" : "Use this API to update an application domain. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:update:*` ]",
          "operationId" : "updateApplicationDomain",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the application domain.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The application domain.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationDomain"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated application domain.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationDomainResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/configurationTypes/{id}" : {
        "get" : {
          "tags" : [ "Configuration Types" ],
          "summary" : "(Beta) Get a configuration type",
          "description" : "Use this API to get a single configuration type by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_configuration:read` ]",
          "operationId" : "getConfigurationType",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the configuration type.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The configuration type.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ConfigurationTypeResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventVersions/{id}/state" : {
        "patch" : {
          "tags" : [ "Events" ],
          "summary" : "Update the state of an event version",
          "description" : "Use this API to update the state of event version. You only need to specify the target stateId field<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event:update_state:*` ]",
          "operationId" : "updateEventVersionState",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The state object.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the event version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/enumVersions/{versionId}" : {
        "get" : {
          "tags" : [ "Enums" ],
          "summary" : "Get an enumeration version",
          "description" : "Use this API to get a single enumeration version by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `ep_enum:get:*` ]",
          "operationId" : "getEnumVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the enumeration version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The enumeration version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/TopicAddressEnumVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/events/{eventId}/versions" : {
        "get" : {
          "tags" : [ "Events" ],
          "summary" : "Get a list of event versions for an event",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/geteventversions\">another endpoint.</a><br><br>*Use this API to get a list of event versions that match the given parameters.",
          "operationId" : "getEventVersionsForEvent",
          "parameters" : [ {
            "name" : "eventId",
            "in" : "path",
            "description" : "The ID of the parent event.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          }, {
            "name" : "displayName",
            "in" : "query",
            "description" : "Match event versions with the given display name.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match event versions with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "version",
            "in" : "query",
            "description" : "Match event versions with the given version.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of event versions.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        },
        "post" : {
          "tags" : [ "Events" ],
          "summary" : "Create an event version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/createeventversion\">another endpoint.</a><br><br>*Create an event version",
          "operationId" : "createEventVersionForEvent",
          "parameters" : [ {
            "name" : "eventId",
            "in" : "path",
            "description" : "The ID of the parent event",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "App version request body description",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event version. Returns the newly saved event version in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/applicationDomains/import" : {
        "post" : {
          "tags" : [ "Application Domains" ],
          "summary" : "(Beta) Create application domains and their entities from import",
          "description" : "Use this API to import application domains and their nested entities. Please note that this endpoint is in beta and could be subject to change in the future<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:import:*` ]",
          "operationId" : "importApplicationDomains",
          "requestBody" : {
            "description" : "Application domain import file",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationDomainImportDTO"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "202" : {
              "description" : "Successfully registered import job with location identified in the response header"
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/schemaVersions/{id}/state" : {
        "patch" : {
          "tags" : [ "Schemas" ],
          "summary" : "Update the state of a schema version",
          "description" : "Use this API to update the state of a schema version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:update_state:*` ]",
          "operationId" : "updateSchemaVersionState",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the schema version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The state change object.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the schema version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/customAttributeDefinitions" : {
        "get" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Get a list of custom attribute definitions",
          "description" : "Use this API to get a list of custom attribute definitions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getCustomAttributeDefinitions",
          "parameters" : [ {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of custom attribute definitions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "associatedEntityTypes",
            "in" : "query",
            "description" : "Match only custom attribute definitions with the given associated entity type names separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of custom attribute definitions and the accompanying metadata.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Create a custom attribute definition",
          "description" : "Use this API to create a custom attribute definition.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:write` ]",
          "operationId" : "createCustomAttributeDefinition",
          "requestBody" : {
            "description" : "The custom attribute definition.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomAttributeDefinition"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a custom attribute definition. Returns the newly saved custom attribute definition in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventManagementAgents/{id}" : {
        "get" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Get an EMA object",
          "description" : "Use this API to get a single EMA by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
          "operationId" : "getEventManagementAgent",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the EMA object.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "Specify extra data to be included, options are: referencedByMessagingServiceIds.\n<br>Replacement: Use expand instead.\n<br>Reason: The change is to align with the API specification design.\n<br>Removal Date: 2024-11-03 18:00:00.000.\n",
            "required" : false,
            "deprecated" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "expand",
            "in" : "query",
            "description" : "Specify extra data to be included, options are: referencedByMessagingServiceIds.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The EMA object.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventManagementAgentResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Delete an EMA object",
          "description" : "Use this API to delete an EMA.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:write` ]",
          "operationId" : "deleteEventManagementAgent",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the EMA object.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Update an EMA object",
          "description" : "Use this API to update an EMA. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:write` ]",
          "operationId" : "updateEventManagementAgent",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the EMA object to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The EMA object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventManagementAgent"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated EMA object.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventManagementAgentResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/schemaVersions/{versionId}" : {
        "get" : {
          "tags" : [ "Schemas" ],
          "summary" : "Get a schema version",
          "description" : "Use this API to get a single schema version by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `schema:get:*` ]",
          "operationId" : "getSchemaVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the schema version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The schema version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/SchemaVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServiceScans/{id}" : {
        "get" : {
          "tags" : [ "Messaging Service Scans" ],
          "summary" : "Get a messaging service scan",
          "description" : "Use this API to get a single messaging service scan by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
          "operationId" : "getMessagingServiceScan",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service scan.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The messaging service scan.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceScanResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Messaging Service Scans" ],
          "summary" : "Delete a messaging service scan",
          "description" : "Use this API to delete a messaging service scan.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:write` ]",
          "operationId" : "deleteMessagingServiceScan",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service scan.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiVersions/{versionId}" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get an Event API Version",
          "description" : "Use this API to get a single event API version by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:get:*` ]",
          "operationId" : "getEventApiVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "A list of additional entities to include in the response.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "parent"
          } ],
          "responses" : {
            "200" : {
              "description" : "The event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Delete an Event API Version",
          "description" : "Use this API to delete an event API version by event API version ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:update:*` ]",
          "operationId" : "deleteEventApiVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Update an Event API by Event API Version ID",
          "description" : "Use this API to update an event API version by event API version ID.You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:update:*` ]",
          "operationId" : "updateEventApiVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event API version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/auditResults/{auditResultId}" : {
        "get" : {
          "tags" : [ "Audit Results" ],
          "summary" : "Get the details of a single audit result",
          "description" : "This provides the details of a single audit result, given its id.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `audit:read` ]",
          "operationId" : "getAuditResultDetail",
          "parameters" : [ {
            "name" : "auditResultId",
            "in" : "path",
            "description" : "The ID of the audit.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The audit detail.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/AuditResultDetailResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/events/{eventId}/versions/{id}" : {
        "get" : {
          "tags" : [ "Events" ],
          "summary" : "Get an event version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/geteventversion\">another endpoint.</a><br><br>*Use this API to get a single event version by its ID.",
          "operationId" : "getEventVersionForEvent",
          "parameters" : [ {
            "name" : "eventId",
            "in" : "path",
            "description" : "The ID of the parent event.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The event version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        },
        "delete" : {
          "tags" : [ "Events" ],
          "summary" : "Delete an event version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/deleteeventversion\">another endpoint.</a><br><br>*Use this API to delete an event version.",
          "operationId" : "deleteEventVersionForEvent",
          "parameters" : [ {
            "name" : "eventId",
            "in" : "path",
            "description" : "The ID of the parent event",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        },
        "patch" : {
          "tags" : [ "Events" ],
          "summary" : "Update an event version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/updateeventversion\">another endpoint.</a><br><br>*Use this API to update an event version. You only need to specify the fields that need to be updated.",
          "operationId" : "updateEventVersionForEvent",
          "parameters" : [ {
            "name" : "eventId",
            "in" : "path",
            "description" : "The ID of the parent event.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event version.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/eventApis/{eventApiId}/versions" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get a List of Event API Versions",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/geteventapiversions\">another endpoint.</a><br><br>*Use this API to get a list of event API versions under a particular event API matching the given parameters.",
          "operationId" : "getEventApiVersionsForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "query",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "displayName",
            "in" : "query",
            "description" : "Match event API versions with the given display name.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "Match event API versions with the given IDs separated by commas.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "version",
            "in" : "query",
            "description" : "Match event API versions with the given version.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "stateId",
            "in" : "query",
            "description" : "Match event API versions with the given state ID.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributes",
            "in" : "query",
            "description" : "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter supports custom attribute values containing only the characters `[a-zA-Z0-9_\\-\\. ]`.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "color==red"
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of event API versions.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        },
        "post" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Create an Event API Version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/createeventapiversion\">another endpoint.</a><br><br>*Use this API to create an event API version.",
          "operationId" : "createEventApiVersionForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Event API version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created an event API version. Returns the newly saved event API version in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/customAttributeDefinitions/{id}" : {
        "get" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Get a custom attribute definition",
          "description" : "Use this API to get a single custom attribute definition by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getCustomAttributeDefinition",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the custom attribute definition.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The custom attribute definition.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Delete a custom attribute definition",
          "description" : "Use this API to delete a custom attribute definition.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:write` ]",
          "operationId" : "deleteCustomAttributeDefinition",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the custom attribute definition",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Update a custom attribute definition",
          "description" : "Use this API to update a custom attribute definition. You can only update the associated entity types.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:write` ]",
          "operationId" : "updateCustomAttributeDefinition",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the custom attribute definition to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The custom attribute definition.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomAttributeDefinition"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated custom attribute definition.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationVersions/{versionId}" : {
        "get" : {
          "tags" : [ "Applications" ],
          "summary" : "Get an application version",
          "description" : "Use this API to get a single application version by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:get:*` ]",
          "operationId" : "getApplicationVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the application version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The application version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Applications" ],
          "summary" : "Delete an application version",
          "description" : "Use this API to delete an application version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "deleteApplicationVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the application version",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Applications" ],
          "summary" : "Update an application version",
          "description" : "Use this API to update an application version. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update:*` ]",
          "operationId" : "updateApplicationVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the application version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "relationsBrokerType",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The application version.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ApplicationVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated application version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationDomains/export/{ids}" : {
        "get" : {
          "tags" : [ "Application Domains" ],
          "summary" : "(Beta) Get application domains and their entities for export",
          "description" : "Use this API to export application domains and their nested entities. Please note that this endpoint is in beta and could be subject to change in the future<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:export:*` ]",
          "operationId" : "exportApplicationDomains",
          "parameters" : [ {
            "name" : "ids",
            "in" : "path",
            "description" : "The IDs of the application domains to export ",
            "required" : true,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Export file containing the application domains and accompanying entities",
              "content" : {
                "*/*" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ApplicationDomainExportDTO"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/changeApplicationDomainOperations" : {
        "post" : {
          "tags" : [ "Application Domain Operations" ],
          "summary" : "Create change application domain operation",
          "description" : "Use this API to execute a change application domain operation.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application_domain:move_contents:*` ]",
          "operationId" : "createChangeApplicationDomainOperation",
          "requestBody" : {
            "description" : "The change application domain operation",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ChangeAppDomainEntitiesDTO"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "202" : {
              "description" : "Successfully executed a change application domain operation."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiVersions/{versionId}/state" : {
        "patch" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Update the State of an Event API Version by Event API Version ID",
          "description" : "Use this API to update the state of an event API version. You only need to specify the state ID field with the desired state ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:update_state:*` ]",
          "operationId" : "updateEventApiVersionState",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The Event API version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProductVersions/{versionId}" : {
        "get" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Get an Event API Product Version",
          "description" : "Use this API to get a single Event API Product version by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:get:*` ]",
          "operationId" : "getEventApiProductVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "include",
            "in" : "query",
            "description" : "A list of additional entities to include in the response.",
            "required" : false,
            "schema" : {
              "type" : "string"
            },
            "example" : "parent"
          }, {
            "name" : "clientAppId",
            "in" : "query",
            "description" : "Match Event API Product versions with the given clientAppId.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The Event API Product version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Delete an Event API Product Version by ID",
          "description" : "Use this API to delete an Event API Product version by ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "deleteEventApiProductVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Update an Event API Product Version by Version ID",
          "description" : "Use this API to update an Event API Product version. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "updateEventApiProductVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The Event API Product version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiProductVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated Event API Product version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiProductVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServiceScans/{scanId}/logs" : {
        "get" : {
          "tags" : [ "Messaging Service Scan Logs" ],
          "summary" : "Get a list of messaging service scan logs",
          "description" : "Use this API to get a list of messaging service scan logs that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
          "operationId" : "getMessagingServiceScansLogs",
          "parameters" : [ {
            "name" : "scanId",
            "in" : "path",
            "description" : "The ID of the messaging service scan we want logs for.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of messaging service scan logs to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of messaging service scan logs and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceScanLogListResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventVersions/{id}/messagingServices" : {
        "put" : {
          "tags" : [ "Events" ],
          "summary" : "Replace messaging service association for an event version",
          "description" : "Use this API to replace the messaging service association for an event version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_runtime:write` ]",
          "operationId" : "updateMsgSvcAssociationForEventVersion",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The messaging service association object",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingServiceAssociationDTO"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated messaging service associations.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceAssociationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/events/{eventId}/versions/{id}/state" : {
        "patch" : {
          "tags" : [ "Events" ],
          "summary" : "Update the state of an event version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/updateeventversionstate\">another endpoint.</a><br><br>*Use this API to update the state of event version. You only need to specify the target stateId field",
          "operationId" : "updateEventVersionStateForEvent",
          "parameters" : [ {
            "name" : "eventId",
            "in" : "path",
            "description" : "The ID of the parent event.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event version.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the event version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/eventApis/{eventApiId}/versions/{id}" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get an Event API Version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/geteventapiversion\">another endpoint.</a><br><br>*Use this API to get a single event API version using the parent ID and the version's ID.",
          "operationId" : "getEventApiVersionForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        },
        "delete" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Delete an Event API Version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/deleteeventapiversion\">another endpoint.</a><br><br>*Use this API to delete an event API version.",
          "operationId" : "deleteEventApiVersionForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        },
        "patch" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Update an Event API Version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/updateeventapiversion\">another endpoint.</a><br><br>*Use this API to update an event API version. You only need to specify the fields that need to be updated.",
          "operationId" : "updateEventApiVersionForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event API version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/EventApiVersionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/applicationVersions/{versionId}/state" : {
        "patch" : {
          "tags" : [ "Applications" ],
          "summary" : "Update the state of an application version",
          "description" : "Use this API to update the state of an application version. You only need to specify the target stateId field.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:update_state:*` ]",
          "operationId" : "updateApplicationVersionState",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the application version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The state change object.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the application version.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/changeApplicationDomainOperations/{id}" : {
        "get" : {
          "tags" : [ "Application Domain Operations" ],
          "summary" : "Get a change application domain operation's details",
          "description" : "Use this API to retrieve a single change application domain operation by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
          "operationId" : "getChangeApplicationDomainOperation",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the change application domain operation.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "202" : {
              "description" : "The change application domain operation.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/OperationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServices/{id}/removeAssociation" : {
        "put" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Remove an association between an messaging service and the requested entity",
          "description" : "Use this API to remove the association between a messaging service and either of EVENT_MESH or EVENT_MANAGEMENT_AGENT.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
          "operationId" : "removeAssociationMessagingService",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The association object with the value matching either EVENT_MESH or EVENT_MANAGEMENT_AGENT.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingServiceRemoveAssociation"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated messaging service, e.g. if the API request body had \"association\": \"EVENT_MESH\" then the resulting object would not have eventMeshId attribute.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProductVersions/{versionId}/state" : {
        "patch" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Update the State of an Event API Product Version by ID",
          "description" : "Use this API to update the state of an Event API Product version. You only need to specify the state ID field with the desired state ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update_state:*` ]",
          "operationId" : "updateEventApiProductVersionState",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The Event API Product version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiProductVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the Event API Product version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApis/{eventApiId}/versions/{id}/state" : {
        "patch" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Update the State of an Event API Version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/updateeventapiversionstate\">another endpoint.</a><br><br>*Use this API to update the state of an event API version. You only need to specify the state ID field with the desired state ID.",
          "operationId" : "updateEventApiVersionStateForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API version to update.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The event API version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiVersion"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated state of the event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/eventApiProductVersions/{versionId}/publish" : {
        "patch" : {
          "tags" : [ "Event API Products" ],
          "summary" : "Update an Event API Product Version To Be Published",
          "description" : "Use this API to publish Event API Product version. Cannot unset once it is published.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update_state:*` ]",
          "operationId" : "publishEventApiProductVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The Event API Product version.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EventApiProductVersion"
                }
              }
            }
          },
          "responses" : {
            "200" : {
              "description" : "Updated the state of the Event API Product version to Published.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/StateChangeRequestResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventManagementAgents/{id}/configuration/raw" : {
        "get" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Get the raw configs in string format for an EMA object",
          "description" : "Use this API to get the raw configs for a single EMA by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
          "operationId" : "getEventManagementAgentConfigRaw",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the EMA object.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "configFileType",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "connected", "standalone" ],
              "default" : "connected"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The EMA config in yaml structure.",
              "content" : {
                "text/plain" : {
                  "schema" : {
                    "type" : "string"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection" : {
        "get" : {
          "tags" : [ "Messaging Service Scan Data" ],
          "summary" : "Get a list of messaging service scan data",
          "description" : "Use this API to get a list of messaging service scan data that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
          "operationId" : "getMessagingServiceScansData",
          "parameters" : [ {
            "name" : "scanId",
            "in" : "path",
            "description" : "The ID of the messaging service scan we want data for.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of messaging service scan data to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          }, {
            "name" : "sort",
            "in" : "query",
            "description" : "The name of the field to sort on.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "ids",
            "in" : "query",
            "description" : "The IDs of the messaging service scan data.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }, {
            "name" : "collectionTypes",
            "in" : "query",
            "description" : "Match only scan data whose dataCollectionType matches the given list.",
            "required" : false,
            "schema" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "brokerConfiguration", "clusterConfiguration", "consumerGroups", "consumerGroupConfiguration", "overrideTopicConfiguration", "queueConfiguration", "queueListing", "schema", "subscriptionConfiguration", "topicConfiguration", "topicListing" ]
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The list of messaging service scan data and the accompanying metadata.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceScanDataListResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventManagementAgents/{id}/configuration/file" : {
        "get" : {
          "tags" : [ "Event Management Agents" ],
          "summary" : "Get the raw configs in file format for an EMA object",
          "description" : "Use this API to get the raw configs for a single EMA by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
          "operationId" : "getEventManagementAgentConfigFile",
          "parameters" : [ {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the EMA object.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "configFileType",
            "in" : "query",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "connected", "standalone" ],
              "default" : "connected"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The EMA config in a yaml file named application.yml.",
              "content" : {
                "application/octet-stream" : {
                  "schema" : {
                    "type" : "string"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApis/{eventApiId}/versions/{id}/asyncApi" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get the AsyncAPI Specification for an Event API Version",
          "description" : "*Deprecation Date: 2022-11-01<br>Removal Date: 2023-12-01<br>Reason: Replaced by <a href=\"/cloud/reference/getasyncapiforeventapiversion\">another endpoint.</a><br><br>*Use this API to get the AsyncAPI specification for an event API version using the parent ID and the version's ID.",
          "operationId" : "getEventApiVersionAsyncApiForEventApi",
          "parameters" : [ {
            "name" : "eventApiId",
            "in" : "path",
            "description" : "The ID of the parent event API.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "showVersioning",
            "in" : "query",
            "description" : "Include versions in each AsyncAPI object's name when only one version is present.",
            "required" : false,
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "includedExtensions",
            "in" : "query",
            "description" : "The event portal database keys to include for each AsyncAPI object.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "all", "parent", "version", "none" ],
              "default" : "all"
            }
          }, {
            "name" : "format",
            "in" : "query",
            "description" : "The format in which to get the AsyncAPI specification. Possible values are yaml and json.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "json", "yaml" ],
              "default" : "json"
            }
          }, {
            "name" : "version",
            "in" : "query",
            "description" : "The version of AsyncAPI to use.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "2.0.0", "2.2.0", "2.5.0" ],
              "default" : "2.5.0"
            }
          }, {
            "name" : "eventApiProductVersionId",
            "in" : "query",
            "description" : "The ID of the event API Product Version to use for generating bindings.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "planId",
            "in" : "query",
            "description" : "The ID of the plan to use for generating bindings.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "gatewayMessagingServiceIds",
            "in" : "query",
            "description" : "The list IDs of gateway messaging services for generating bindings.",
            "required" : false,
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The AsyncAPI specification for the event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string"
                  }
                },
                "text/plain" : {
                  "schema" : {
                    "type" : "string"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "deprecated" : true
        }
      },
      "/api/v2/architecture/eventApiVersions/{eventApiVersionId}/asyncApi" : {
        "get" : {
          "tags" : [ "Event APIs" ],
          "summary" : "Get the AsyncAPI Specification for an Event API Version",
          "description" : "Use this API to get the AsyncAPI specification for an event API version annotated with Event Portal metadata.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api:generate_async_api:*` ]",
          "operationId" : "getAsyncApiForEventApiVersion",
          "parameters" : [ {
            "name" : "eventApiVersionId",
            "in" : "path",
            "description" : "The ID of the event API version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "showVersioning",
            "in" : "query",
            "description" : "Include versions in each AsyncAPI object's name when only one version is present",
            "required" : false,
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "format",
            "in" : "query",
            "description" : "The format in which to get the AsyncAPI specification. Possible values are yaml and json.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "json", "yaml" ],
              "default" : "json"
            }
          }, {
            "name" : "includedExtensions",
            "in" : "query",
            "description" : "The event portal database keys to include for each AsyncAPI object.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "all", "parent", "version", "none" ],
              "default" : "all"
            }
          }, {
            "name" : "asyncApiVersion",
            "in" : "query",
            "description" : "The version of AsyncAPI to use.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "2.0.0", "2.2.0", "2.5.0" ],
              "default" : "2.5.0"
            }
          }, {
            "name" : "eventApiProductVersionId",
            "in" : "query",
            "description" : "The ID of the event API Product Version to use for generating bindings.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "planId",
            "in" : "query",
            "description" : "The ID of the plan to use for generating bindings.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "gatewayMessagingServiceIds",
            "in" : "query",
            "description" : "The list IDs of gateway messaging services for generating bindings.",
            "required" : false,
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The AsyncAPI specification for the event API version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string"
                  },
                  "example" : "{\n    \"components\": {\n        \"schemas\": {\n            \"ynlqV\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"d024effaos6\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"ynlqV\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"ndZll\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"m6h3ic4f5l1\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                },\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n        },\n    },\n    \"channels\": {\n        \"solace/cloud/{category_0_1_0}/color\": {\n            \"subscribe\": {\n                \"message\": {\n                \"x-ep-event-id\": \"aak9yd6ccsb\",\n                \"x-ep-event-version-id\": \"kqa6oduarqp\",\n                \"payload\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"d024effaos6\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"ynlqV\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"ndZll\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"m6h3ic4f5l1\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                },\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n                },\n                \"x-ep-event-version\": \"0.0.1\",\n                \"x-ep-event-name\": \"RegistrationEventX\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            \"parameters\": {\n                \"category_0_1_0\": {\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"one\",\n                            \"two\"\n                        ]\n                    },\n                    \"x-ep-enum-version-displayname\": \"Big Sur\",\n                    \"x-ep-enum-version\": \"0.1.0\",\n                    \"x-ep-enum-name\": \"w8yaL\",\n                    \"x-ep-enum-state-id\": \"1\",\n                    \"x-ep-application-domain-id\": \"defaultDomain\",\n                    \"x-ep-enum-version-id\": \"71jco7kfh3r\",\n                    \"x-ep-enum-id\": \"aakggw2fnc7\",\n                    \"x-ep-shared\": \"true\",\n                    \"x-ep-parameter-name\": \"category\",\n                    \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            }\n        },\n        \"solace/cloud/{category_0_1_0}/{category_0_2_0}\": {\n            \"publish\": {\n                \"message\": {\n                \"x-ep-event-id\": \"0mht953vzmc\",\n                \"x-ep-event-version-id\": \"lo38jbd8bud\",\n                \"payload\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"d024effaos6\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"ynlqV\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"ndZll\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"m6h3ic4f5l1\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n                },\n                \"x-ep-event-version\": \"0.0.2\",\n                \"x-ep-event-name\": \"RegistrationEventY\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            },\n            \"parameters\": {\n                \"category_0_2_0\": {\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"one\",\n                            \"two\"\n                        ]\n                    },\n                    \"x-ep-enum-version-displayname\": \"Big Sur\",\n                    \"x-ep-enum-version\": \"0.2.0\",\n                    \"x-ep-enum-name\": \"w8yaL\",\n                    \"x-ep-enum-state-id\": \"1\",\n                    \"x-ep-application-domain-id\": \"defaultDomain\",\n                    \"x-ep-enum-version-id\": \"4gjsah95kts\",\n                    \"x-ep-enum-id\": \"aakggw2fnc7\",\n                    \"x-ep-shared\": \"true\",\n                    \"x-ep-parameter-name\": \"category\",\n                    \"x-ep-application-domain-name\": \"defaultDomainName\"\n                },\n                \"category_0_1_0\": {\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"one\",\n                            \"two\"\n                        ]\n                    },\n                    \"x-ep-enum-version-displayname\": \"Big Sur\",\n                    \"x-ep-enum-version\": \"0.1.0\",\n                    \"x-ep-enum-name\": \"w8yaL\",\n                    \"x-ep-enum-state-id\": \"1\",\n                    \"x-ep-application-domain-id\": \"defaultDomain\",\n                    \"x-ep-enum-version-id\": \"71jco7kfh3r\",\n                    \"x-ep-enum-id\": \"aakggw2fnc7\",\n                    \"x-ep-shared\": \"true\",\n                    \"x-ep-parameter-name\": \"category\",\n                    \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            }\n        }\n    },\n    \"asyncapi\": \"2.5.0\",\n    \"info\": {\n        \"x-ep-event-api-version\": \"0.0.1\",\n        \"x-ep-event-api-id\": \"pghiko8xqgo\",\n        \"x-ep-displayname\": \"my event api version\",\n        \"x-ep-state-name\": \"DRAFT\",\n        \"title\": \"myEventApi\",\n        \"x-ep-application-domain-id\": \"defaultDomain\",\n        \"version\": \"0.0.1\",\n        \"x-ep-state-id\": \"1\",\n        \"x-ep-event-api-version-id\": \"gl1kllq6hb7\",\n        \"x-ep-application-domain-name\": \"defaultDomainName\",\n        \"x-ep-shared\": \"true\"\n    }\n}"
                },
                "text/plain" : {
                  "schema" : {
                    "type" : "string"
                  },
                  "example" : "{\n    \"components\": {\n        \"schemas\": {\n            \"ynlqV\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"d024effaos6\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"ynlqV\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"ndZll\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"m6h3ic4f5l1\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                },\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n        },\n    },\n    \"channels\": {\n        \"solace/cloud/{category_0_1_0}/color\": {\n            \"subscribe\": {\n                \"message\": {\n                \"x-ep-event-id\": \"aak9yd6ccsb\",\n                \"x-ep-event-version-id\": \"kqa6oduarqp\",\n                \"payload\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"d024effaos6\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"ynlqV\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"ndZll\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"m6h3ic4f5l1\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                },\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n                },\n                \"x-ep-event-version\": \"0.0.1\",\n                \"x-ep-event-name\": \"RegistrationEventX\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            \"parameters\": {\n                \"category_0_1_0\": {\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"one\",\n                            \"two\"\n                        ]\n                    },\n                    \"x-ep-enum-version-displayname\": \"Big Sur\",\n                    \"x-ep-enum-version\": \"0.1.0\",\n                    \"x-ep-enum-name\": \"w8yaL\",\n                    \"x-ep-enum-state-id\": \"1\",\n                    \"x-ep-application-domain-id\": \"defaultDomain\",\n                    \"x-ep-enum-version-id\": \"71jco7kfh3r\",\n                    \"x-ep-enum-id\": \"aakggw2fnc7\",\n                    \"x-ep-shared\": \"true\",\n                    \"x-ep-parameter-name\": \"category\",\n                    \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            }\n        },\n        \"solace/cloud/{category_0_1_0}/{category_0_2_0}\": {\n            \"publish\": {\n                \"message\": {\n                \"x-ep-event-id\": \"0mht953vzmc\",\n                \"x-ep-event-version-id\": \"lo38jbd8bud\",\n                \"payload\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"d024effaos6\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"ynlqV\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"ndZll\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"m6h3ic4f5l1\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n                },\n                \"x-ep-event-version\": \"0.0.2\",\n                \"x-ep-event-name\": \"RegistrationEventY\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            },\n            \"parameters\": {\n                \"category_0_2_0\": {\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"one\",\n                            \"two\"\n                        ]\n                    },\n                    \"x-ep-enum-version-displayname\": \"Big Sur\",\n                    \"x-ep-enum-version\": \"0.2.0\",\n                    \"x-ep-enum-name\": \"w8yaL\",\n                    \"x-ep-enum-state-id\": \"1\",\n                    \"x-ep-application-domain-id\": \"defaultDomain\",\n                    \"x-ep-enum-version-id\": \"4gjsah95kts\",\n                    \"x-ep-enum-id\": \"aakggw2fnc7\",\n                    \"x-ep-shared\": \"true\",\n                    \"x-ep-parameter-name\": \"category\",\n                    \"x-ep-application-domain-name\": \"defaultDomainName\"\n                },\n                \"category_0_1_0\": {\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"one\",\n                            \"two\"\n                        ]\n                    },\n                    \"x-ep-enum-version-displayname\": \"Big Sur\",\n                    \"x-ep-enum-version\": \"0.1.0\",\n                    \"x-ep-enum-name\": \"w8yaL\",\n                    \"x-ep-enum-state-id\": \"1\",\n                    \"x-ep-application-domain-id\": \"defaultDomain\",\n                    \"x-ep-enum-version-id\": \"71jco7kfh3r\",\n                    \"x-ep-enum-id\": \"aakggw2fnc7\",\n                    \"x-ep-shared\": \"true\",\n                    \"x-ep-parameter-name\": \"category\",\n                    \"x-ep-application-domain-name\": \"defaultDomainName\"\n                }\n            }\n        }\n    },\n    \"asyncapi\": \"2.5.0\",\n    \"info\": {\n        \"x-ep-event-api-version\": \"0.0.1\",\n        \"x-ep-event-api-id\": \"pghiko8xqgo\",\n        \"x-ep-displayname\": \"my event api version\",\n        \"x-ep-state-name\": \"DRAFT\",\n        \"title\": \"myEventApi\",\n        \"x-ep-application-domain-id\": \"defaultDomain\",\n        \"version\": \"0.0.1\",\n        \"x-ep-state-id\": \"1\",\n        \"x-ep-event-api-version-id\": \"gl1kllq6hb7\",\n        \"x-ep-application-domain-name\": \"defaultDomainName\",\n        \"x-ep-shared\": \"true\"\n    }\n}"
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServices/{messagingServiceId}/scanStart" : {
        "put" : {
          "tags" : [ "Messaging Services" ],
          "summary" : "Initiate a scan request to run against a messaging service",
          "description" : "Use this API to make a scan request on a messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
          "operationId" : "scanStartMessagingService",
          "parameters" : [ {
            "name" : "messagingServiceId",
            "in" : "path",
            "description" : "The ID of the messaging service.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The messaging service.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingServiceOperation"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "Requested a scan on the messaging service. The operation object with ID set as ID of the created scan Object is returned in the response body.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceOperationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationVersions/{versionId}/messagingServices" : {
        "put" : {
          "tags" : [ "Applications" ],
          "summary" : "Replace messaging service association for an application version",
          "description" : "Use this API to replace the messaging service association for an application version.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_runtime:write` ]",
          "operationId" : "updateMsgSvcAssociationForAppVersion",
          "parameters" : [ {
            "name" : "versionId",
            "in" : "path",
            "description" : "The ID of the application version",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The messaging service association object",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MessagingServiceAssociationDTO"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "The updated messaging service associations.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceAssociationResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProductMemAssociations/{memAssociationId}" : {
        "delete" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Delete an Association Between a Gateway Messaging Service and an Event API Product Version by Association ID",
          "description" : "Use this API to disassociate an Event API Product version and gateway messaging service by association ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "disassociateGatewayMessagingServiceFromEventApiProductVersionById",
          "parameters" : [ {
            "name" : "memAssociationId",
            "in" : "path",
            "description" : "The association ID to perform the disassociation for.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection/{id}" : {
        "get" : {
          "tags" : [ "Messaging Service Scan Data" ],
          "summary" : "Get a messaging service scan data",
          "description" : "Use this API to get a single messaging service scan data by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
          "operationId" : "getMessagingServiceScanData",
          "parameters" : [ {
            "name" : "scanId",
            "in" : "path",
            "description" : "The ID of the messaging service scan.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "id",
            "in" : "path",
            "description" : "The ID of the messaging service scan data.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The messaging service scan data.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/MessagingServiceScanDataResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationVersions/{applicationVersionId}/asyncApi" : {
        "get" : {
          "tags" : [ "Applications" ],
          "summary" : "Get the AsyncAPI specification for an application version",
          "description" : "Use this API to get the AsyncAPI specification for an application version annotated with Event Portal metadata.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `application:generate_async_api:*` ]",
          "operationId" : "getAsyncApiForApplicationVersion",
          "parameters" : [ {
            "name" : "applicationVersionId",
            "in" : "path",
            "description" : "The ID of the application version.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "format",
            "in" : "query",
            "description" : "The format in which to get the AsyncAPI specification. Possible values are yaml and json.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "json", "yaml" ],
              "default" : "json"
            }
          }, {
            "name" : "showVersioning",
            "in" : "query",
            "description" : "Include versions in each AsyncAPI object's name when only one version is present",
            "required" : false,
            "schema" : {
              "type" : "boolean",
              "default" : false
            }
          }, {
            "name" : "includedExtensions",
            "in" : "query",
            "description" : "The event portal database keys to include for each AsyncAPI object.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "all", "parent", "version", "none" ],
              "default" : "all"
            }
          }, {
            "name" : "asyncApiVersion",
            "in" : "query",
            "description" : "The version of AsyncAPI to use.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "2.0.0", "2.2.0", "2.5.0" ],
              "default" : "2.5.0"
            }
          }, {
            "name" : "environmentOptions",
            "in" : "query",
            "description" : "Determines whether bindings are applied to declared consumed events or published consumed events in the event mesh or both.",
            "required" : false,
            "schema" : {
              "type" : "string",
              "enum" : [ "include_declared_and_attracted_events", "include_attracted_events_only" ],
              "default" : "include_attracted_events_only"
            }
          }, {
            "name" : "messagingServiceId",
            "in" : "query",
            "description" : "Applies bindings from consumed events that are published in this messaging service's modeled event mesh.",
            "required" : false,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "The AsyncAPI specification for the application version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "type" : "string"
                  },
                  "example" : "{\n    \"components\": {\n        \"schemas\": {\n            \"GZYU7_0_0_2\": {\n                \"x-ep-schema-version\": \"0.0.2\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-version-id\": \"iifjj2tntyz\",\n                \"x-ep-schema-id\": \"diw618f6hit\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"GZYU7\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"Age\": \"2\",\n                \"x-ep-schema-version-displayname\": \"3mUFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            },\n            \"GZYU7_0_0_1\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"z8gmecsxs7c\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"GZYU7\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"1pR5c\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"diw618f6hit\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                },\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n        },\n        \"messages\": {\n            \"RegistrationEvent_0_1_0\": {\n                \"x-ep-event-id\": \"8k62hfhhaqx\",\n                \"x-ep-event-version-id\": \"yn8evv7wfve\",\n                \"payload\": {\n                    \"$ref\": \"#/components/schemas/GZYU7_0_0_1\"\n                },\n                \"x-ep-event-version\": \"0.1.0\",\n                \"x-ep-event-name\": \"RegistrationEvent\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            }\n        }\n    },\n    \"channels\": {\n        \"corp/billing/accoun#ts\": {\n            \"subscribe\": {\n                \"message\": {\n                \"x-ep-event-id\": \"8k62hfhhaqx\",\n                \"x-ep-event-version-id\": \"yn8evv7wfve\",\n                \"payload\": {\n                    \"$ref\": \"#/components/schemas/GZYU7_0_0_1\"\n                },\n                \"x-ep-event-version\": \"0.1.0\",\n                \"x-ep-event-name\": \"RegistrationEvent\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            }\n            },\n            \"publish\": {\n                \"message\": {\n                \"x-ep-event-id\": \"8k62hfhhaqx\",\n                \"x-ep-event-version-id\": \"1v08b82msv8\",\n                \"payload\": {\n                    \"$ref\": \"#/components/schemas/GZYU7_0_0_2\"\n                },\n                \"x-ep-event-version\": \"0.2.0\",\n                \"x-ep-event-name\": \"RegistrationEvent\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            },\n            }\n        }\n    },\n    \"asyncapi\": \"2.0.0\",\n    \"info\": {\n        \"x-ep-application-version\": \"0.0.1\",\n        \"x-ep-application-version-id\": \"9i8d1cikx8o\",\n        \"x-ep-application-id\": \"7aegxzxtraw\",\n        \"x-ep-displayname\": \"my application version\",\n        \"x-ep-state-name\": \"DRAFT\",\n        \"title\": \"myApplication\",\n        \"x-ep-application-domain-id\": \"defaultDomain\",\n        \"version\": \"0.0.1\",\n        \"x-ep-state-id\": \"1\",\n        \"x-ep-application-domain-name\": \"defaultDomainName\"\n    }\n}"
                },
                "text/plain" : {
                  "schema" : {
                    "type" : "string"
                  },
                  "example" : "{\n    \"components\": {\n        \"schemas\": {\n            \"GZYU7_0_0_2\": {\n                \"x-ep-schema-version\": \"0.0.2\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-version-id\": \"iifjj2tntyz\",\n                \"x-ep-schema-id\": \"diw618f6hit\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"GZYU7\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"Age\": \"2\",\n                \"x-ep-schema-version-displayname\": \"3mUFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            },\n            \"GZYU7_0_0_1\": {\n                \"x-ep-schema-version\": \"0.0.1\",\n                \"x-ep-schema-version-id\": \"z8gmecsxs7c\",\n                \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n                \"x-ep-schema-state-name\": \"DRAFT\",\n                \"x-ep-schema-name\": \"GZYU7\",\n                \"title\": \"Person\",\n                \"type\": \"object\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"x-ep-schema-version-displayname\": \"1pR5c\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\",\n                \"x-ep-schema-state-id\": \"1\",\n                \"x-ep-schema-id\": \"diw618f6hit\",\n                \"properties\": {\n                    \"firstName\": {\n                        \"description\": \"The person's first name.\",\n                        \"type\": \"string\"\n                    },\n                    \"lastName\": {\n                        \"description\": \"The person's last name.\",\n                        \"type\": \"string\"\n                    },\n                    \"age\": {\n                        \"description\": \"Age in years which must be equal to or greater than zero.\",\n                        \"type\": \"integer\",\n                        \"minimum\": 0\n                    }\n                },\n                \"$id\": \"https://example.com/person.schema.json\"\n            }\n        },\n        \"messages\": {\n            \"RegistrationEvent_0_1_0\": {\n                \"x-ep-event-id\": \"8k62hfhhaqx\",\n                \"x-ep-event-version-id\": \"yn8evv7wfve\",\n                \"payload\": {\n                    \"$ref\": \"#/components/schemas/GZYU7_0_0_1\"\n                },\n                \"x-ep-event-version\": \"0.1.0\",\n                \"x-ep-event-name\": \"RegistrationEvent\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            }\n        }\n    },\n    \"channels\": {\n        \"corp/billing/accoun#ts\": {\n            \"subscribe\": {\n                \"message\": {\n                \"x-ep-event-id\": \"8k62hfhhaqx\",\n                \"x-ep-event-version-id\": \"yn8evv7wfve\",\n                \"payload\": {\n                    \"$ref\": \"#/components/schemas/GZYU7_0_0_1\"\n                },\n                \"x-ep-event-version\": \"0.1.0\",\n                \"x-ep-event-name\": \"RegistrationEvent\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            }\n            },\n            \"publish\": {\n                \"message\": {\n                \"x-ep-event-id\": \"8k62hfhhaqx\",\n                \"x-ep-event-version-id\": \"1v08b82msv8\",\n                \"payload\": {\n                    \"$ref\": \"#/components/schemas/GZYU7_0_0_2\"\n                },\n                \"x-ep-event-version\": \"0.2.0\",\n                \"x-ep-event-name\": \"RegistrationEvent\",\n                \"x-ep-application-domain-id\": \"defaultDomain\",\n                \"schemaFormat\": \"application/vnd.aai.asyncapi+json;version=2.0.0\",\n                \"contentType\": \"application/json\",\n                \"x-ep-event-state-id\": \"1\",\n                \"x-ep-event-state-name\": \"DRAFT\",\n                \"x-ep-shared\": \"false\",\n                \"x-ep-application-domain-name\": \"defaultDomainName\"\n            },\n            }\n        }\n    },\n    \"asyncapi\": \"2.0.0\",\n    \"info\": {\n        \"x-ep-application-version\": \"0.0.1\",\n        \"x-ep-application-version-id\": \"9i8d1cikx8o\",\n        \"x-ep-application-id\": \"7aegxzxtraw\",\n        \"x-ep-displayname\": \"my application version\",\n        \"x-ep-state-name\": \"DRAFT\",\n        \"title\": \"myApplication\",\n        \"x-ep-application-domain-id\": \"defaultDomain\",\n        \"version\": \"0.0.1\",\n        \"x-ep-state-id\": \"1\",\n        \"x-ep-application-domain-name\": \"defaultDomainName\"\n    }\n}"
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProductVersions/{eventApiProductVersionId}/memAssociations" : {
        "post" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Create an Association Between a Gateway Messaging Service and an Event API Product Version",
          "description" : "Use this API to associate an Event API Product version and gateway messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "associateGatewayMessagingServiceToEAPVersion",
          "parameters" : [ {
            "name" : "eventApiProductVersionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version to associate.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "Gateway messaging service Id and supported Protocols.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GatewayMessagingService"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "200" : {
              "description" : "Associated GatewayMessagingService to Event API Product version.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/GatewayMessagingServiceResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationDomains/{applicationDomainId}/customAttributeDefinitions" : {
        "get" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Get a list the custom attribute definitions of provided application domain",
          "description" : "Use this API to get a list of custom attribute definitions that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:get:*` ]",
          "operationId" : "getCustomAttributeDefinitionsByApplicationDomain",
          "parameters" : [ {
            "name" : "applicationDomainId",
            "in" : "path",
            "description" : "Match only custom attribute definitions with the given application domain Id ",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "pageSize",
            "in" : "query",
            "description" : "The number of custom attribute definitions to get per page.",
            "required" : false,
            "schema" : {
              "maximum" : 100,
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 20
            }
          }, {
            "name" : "pageNumber",
            "in" : "query",
            "description" : "The page number to get.",
            "required" : false,
            "schema" : {
              "minimum" : 1,
              "type" : "integer",
              "format" : "int32",
              "default" : 1
            }
          } ],
          "responses" : {
            "200" : {
              "description" : "Get a list of custom attribute definitions of a given application domain id.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionsResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "post" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Create a custom attribute definition for provided application domain",
          "description" : "Use this API to create a custom attribute definition for provided application domain.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:create:*` ]",
          "operationId" : "createCustomAttributeDefinitionByApplicationDomain",
          "parameters" : [ {
            "name" : "applicationDomainId",
            "in" : "path",
            "description" : "The ID of the application domain",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The custom attribute definition.",
            "content" : {
              "application/json;charset=UTF-8" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomAttributeDefinition"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Created a custom attribute definition in provided application domain and Returns the newly saved custom attribute definition in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "delete" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Delete a custom attribute definition of provided application domain",
          "description" : "Use this API to delete a custom attribute definition by given application domain.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:delete:*` ]",
          "operationId" : "deleteCustomAttributeDefinitionByApplicationDomain",
          "parameters" : [ {
            "name" : "applicationDomainId",
            "in" : "path",
            "description" : "The ID of the application domain",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/eventApiProductVersions/{eventApiProductVersionId}/memAssociations/{memAssociationId}" : {
        "delete" : {
          "tags" : [ "Event API Products" ],
          "summary" : "(Beta) Delete an Association Between a Gateway Messaging Service and an Event API Product Version",
          "description" : "Use this API to disassociate an Event API Product version and gateway messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_api_product:update:*` ]",
          "operationId" : "disassociateGatewayMessagingServiceToEAPVersion",
          "parameters" : [ {
            "name" : "eventApiProductVersionId",
            "in" : "path",
            "description" : "The ID of the Event API Product version to disassociate.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "memAssociationId",
            "in" : "path",
            "description" : "The MEM association ID to dissociate from.",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      "/api/v2/architecture/applicationDomains/{applicationDomainId}/customAttributeDefinitions/{customAttributeId}" : {
        "delete" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Delete a custom attribute definition of provided application domain",
          "description" : "Use this API to delete a custom attribute definition of given application domain.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:delete:*` ]",
          "operationId" : "deleteCustomAttributeDefinitionOfApplicationDomain",
          "parameters" : [ {
            "name" : "applicationDomainId",
            "in" : "path",
            "description" : "The ID of the application domain",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributeId",
            "in" : "path",
            "description" : "The ID of the custom attribute definition",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "responses" : {
            "204" : {
              "description" : "No content is returned."
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "patch" : {
          "tags" : [ "Custom Attribute Definitions" ],
          "summary" : "Update a custom attribute definition for provided application domain",
          "description" : "Use this API to update a custom attribute definition for provided application domain.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `custom_attribute:update:*` ]",
          "operationId" : "updateCustomAttributeDefinitionByApplicationDomain",
          "parameters" : [ {
            "name" : "applicationDomainId",
            "in" : "path",
            "description" : "The ID of the application domain",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          }, {
            "name" : "customAttributeId",
            "in" : "path",
            "description" : "The ID of the custom attribute definition",
            "required" : true,
            "schema" : {
              "type" : "string"
            }
          } ],
          "requestBody" : {
            "description" : "The custom attribute definition.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CustomAttributeDefinition"
                }
              }
            },
            "required" : true
          },
          "responses" : {
            "201" : {
              "description" : "Updated a custom attribute definition in provided application domain and Returns the newly saved custom attribute definition in the response body.",
              "content" : {
                "application/json;charset=UTF-8" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/CustomAttributeDefinitionResponse"
                  }
                }
              }
            },
            "400" : {
              "description" : "Bad Request.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                },
                "*/*" : {
                  "schema" : {
                    "oneOf" : [ {
                      "$ref" : "#/components/schemas/ErrorResponse"
                    }, {
                      "$ref" : "#/components/schemas/InvalidStateReference"
                    } ]
                  }
                }
              }
            },
            "401" : {
              "description" : "Unauthorized.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "403" : {
              "description" : "Forbidden.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404" : {
              "description" : "Not Found.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "405" : {
              "description" : "Method Not Allowed.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500" : {
              "description" : "Internal Server Error.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "501" : {
              "description" : "Not Implemented.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "503" : {
              "description" : "Service Unavailable.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "504" : {
              "description" : "Gateway Timeout.",
              "content" : {
                "application/json" : {
                  "schema" : {
                    "$ref" : "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components" : {
      "schemas" : {
        "Address" : {
          "required" : [ "addressLevels" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "addressLevels" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AddressLevel"
              }
            },
            "addressType" : {
              "type" : "string",
              "enum" : [ "topic" ]
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AddressLevel" : {
          "required" : [ "addressLevelType", "name" ],
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "root"
            },
            "addressLevelType" : {
              "type" : "string",
              "enum" : [ "literal", "variable" ]
            },
            "enumVersionId" : {
              "type" : "string"
            }
          }
        },
        "AddressSpace" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "123456"
            },
            "brokerType" : {
              "type" : "string",
              "example" : "kafka"
            },
            "delimiter" : {
              "type" : "string",
              "example" : "_"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "AddressSpaceResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/AddressSpace"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "AddressSpacesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AddressSpace"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "Application" : {
          "required" : [ "applicationDomainId", "applicationType", "brokerType", "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "name" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "My First Application"
            },
            "applicationType" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "standard"
            },
            "brokerType" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "solace",
              "enum" : [ "kafka", "solace" ]
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "numberOfVersions" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true,
              "example" : 3
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ApplicationChangeRequestPreviewResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/ApplicationDeploymentPreviewDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationConfigPushJobResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationConfigurationPushJob"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "ApplicationConfigurationPushJob" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "eventBrokerId" : {
              "type" : "string"
            },
            "applicationId" : {
              "type" : "string"
            },
            "runtimeEntityConfigurations" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RuntimeEntityConfiguration"
              }
            },
            "sourceType" : {
              "type" : "string",
              "enum" : [ "changeRecord" ]
            },
            "sourceId" : {
              "type" : "string"
            },
            "requestMetadata" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "status" : {
              "type" : "string",
              "enum" : [ "in_progress", "error", "validation_error", "success" ]
            },
            "createdTime" : {
              "type" : "string"
            },
            "errorDescription" : {
              "type" : "string"
            },
            "updatedTime" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            },
            "isRemoval" : {
              "type" : "boolean"
            }
          }
        },
        "ApplicationDeployment" : {
          "required" : [ "action", "applicationVersionId", "eventBrokerId" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "applicationVersionId" : {
              "type" : "string"
            },
            "action" : {
              "type" : "string",
              "enum" : [ "deploy", "undeploy" ]
            },
            "eventBrokerId" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ApplicationDeploymentPreviewDTO" : {
          "type" : "object",
          "properties" : {
            "requested" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PreviewEntityConfigurationDTO"
              }
            },
            "existing" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/PreviewEntityConfigurationDTO"
              }
            }
          }
        },
        "ApplicationDomain" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "name" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "My First Application Domain"
            },
            "description" : {
              "maxLength" : 10000,
              "minLength" : 0,
              "type" : "string",
              "example" : "Application Domain created by the Solace PubSub+ Cloud API documentation"
            },
            "uniqueTopicAddressEnforcementEnabled" : {
              "type" : "boolean",
              "description" : "Forces all topic addresses within the application domain to be unique.",
              "example" : false
            },
            "topicDomainEnforcementEnabled" : {
              "type" : "boolean",
              "description" : "Forces all topic addresses within the application domain to be prefixed with one of the application domain’s configured topic domains.",
              "example" : false
            },
            "stats" : {
              "$ref" : "#/components/schemas/ApplicationDomainStats"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ApplicationDomainExportDTO" : {
          "type" : "object",
          "properties" : {
            "formatVersion" : {
              "type" : "string"
            },
            "applicationDomains" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationDomain"
              }
            },
            "topicDomains" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicDomain"
              }
            },
            "applications" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Application"
              }
            },
            "applicationVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationVersion"
              }
            },
            "events" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Event"
              }
            },
            "eventVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventVersion"
              }
            },
            "schemas" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaObject"
              }
            },
            "schemaVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaVersion"
              }
            },
            "enums" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnum"
              }
            },
            "enumVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnumVersion"
              }
            },
            "eventApis" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApi"
              }
            },
            "eventApiVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiVersion"
              }
            },
            "eventApiProducts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProduct"
              }
            },
            "eventApiProductVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProductVersion"
              }
            },
            "addressSpaces" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AddressSpace"
              }
            },
            "customAttributeDefinitions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttributeDefinition"
              }
            }
          }
        },
        "ApplicationDomainImportDTO" : {
          "type" : "object",
          "properties" : {
            "formatVersion" : {
              "type" : "string"
            },
            "applicationDomains" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationDomain"
              }
            },
            "topicDomains" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicDomain"
              }
            },
            "applications" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Application"
              }
            },
            "applicationVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationVersion"
              }
            },
            "events" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Event"
              }
            },
            "eventVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventVersion"
              }
            },
            "schemas" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaObject"
              }
            },
            "schemaVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaVersion"
              }
            },
            "enums" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnum"
              }
            },
            "enumVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnumVersion"
              }
            },
            "eventApis" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApi"
              }
            },
            "eventApiVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiVersion"
              }
            },
            "eventApiProducts" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProduct"
              }
            },
            "eventApiProductVersions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProductVersion"
              }
            },
            "addressSpaces" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AddressSpace"
              }
            },
            "customAttributeDefinitions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttributeDefinition"
              }
            }
          }
        },
        "ApplicationDomainResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/ApplicationDomain"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationDomainStats" : {
          "type" : "object",
          "properties" : {
            "schemaCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "eventCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "applicationCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "enumCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "eventApiCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "eventApiProductCount" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "readOnly" : true
        },
        "ApplicationDomainsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationDomain"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "ApplicationRegistration" : {
          "required" : [ "applicationDomainId", "name", "registrationId" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "registrationId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "applicationId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "name" : {
              "maxLength" : 60,
              "type" : "string",
              "example" : "My First Application Registration"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            },
            "customAttributes" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        },
        "ApplicationRegistrationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/ApplicationRegistration"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationRegistrationsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationRegistration"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/Application"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationVersion" : {
          "required" : [ "applicationId", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "applicationId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "description" : {
              "maxLength" : 10000,
              "type" : "string",
              "example" : "Application created by Solace PubSub+ Cloud documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "declaredProducedEventVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredConsumedEventVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredEventApiProductVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "consumers" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/Consumer"
              }
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "messagingServiceIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ApplicationVersionFrontendDTO" : {
          "required" : [ "applicationId", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "applicationId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "description" : {
              "maxLength" : 10000,
              "type" : "string",
              "example" : "Application created by Solace PubSub+ Cloud documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "declaredProducedEventVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredConsumedEventVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredEventApiProductVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "consumers" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/Consumer"
              }
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "messagingServiceIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "parentName" : {
              "type" : "string"
            },
            "clientProfileName" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ApplicationVersionFrontendResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/ApplicationVersionFrontendDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationVersionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/ApplicationVersion"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ApplicationVersionsFrontendResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationVersionFrontendDTO"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "ApplicationVersionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationVersion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "ApplicationsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Application"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "AssociatedEntity" : {
          "type" : "object",
          "properties" : {
            "entityType" : {
              "type" : "string"
            },
            "applicationDomainIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "AttractedEventVersionTuple" : {
          "type" : "object",
          "properties" : {
            "eventVersionId" : {
              "type" : "string"
            },
            "eventMeshIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "readOnly" : true
        },
        "AttractingApplicationVersionTuple" : {
          "type" : "object",
          "properties" : {
            "applicationVersionId" : {
              "type" : "string"
            },
            "eventMeshIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "readOnly" : true
        },
        "Audit" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "messagingServiceId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "auditEntityType" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "solaceQueue"
            },
            "messagingServiceName" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "My Solace Service"
            },
            "identifier" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "orderEventQueue"
            },
            "status" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "partialMatch"
            },
            "designerMappingId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "designerMappingAssociationId" : {
              "type" : "string",
              "format" : "uuid",
              "readOnly" : true,
              "example" : "11ee1ffe-dca0-20e5-a648-d900f0610a2a"
            },
            "runtimeMappingId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "runtimeMappingAssociationId" : {
              "type" : "string",
              "format" : "uuid",
              "readOnly" : true,
              "example" : "11ee1ffe-dca0-20e5-a648-d900f0610a2a"
            },
            "designerMapping" : {
              "$ref" : "#/components/schemas/DesignerMappingDTO"
            },
            "runtimeMapping" : {
              "$ref" : "#/components/schemas/RuntimeMappingDTO"
            },
            "associatedTags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Tag"
              }
            },
            "schemaType" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          },
          "readOnly" : true
        },
        "AuditCommandDTO" : {
          "type" : "object",
          "properties" : {
            "auditOperationType" : {
              "type" : "string",
              "enum" : [ "aggregateAudit", "audit", "deleteAll", "designerMapping", "designerUpdate", "runtimeMapping", "runtimeUpdate", "scan", "updateRelationships" ]
            },
            "auditEntityType" : {
              "type" : "string",
              "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
            },
            "sourceId" : {
              "type" : "string"
            },
            "synchronous" : {
              "type" : "boolean"
            },
            "productionModeErrorHandling" : {
              "type" : "boolean"
            }
          }
        },
        "AuditDetail" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "runtimeAttributes" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "designerAttributes" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "versionId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "entityId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "parentId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "scanId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "status" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "partialMatch"
            },
            "identifier" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "orderEventQueue"
            },
            "relations" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/AuditRelationDTO"
              }
            },
            "extendedAttributes" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "associatedTags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Tag"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AuditDetailResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/AuditDetail"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "AuditImportDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "auditIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "auditImportAction" : {
              "type" : "string",
              "enum" : [ "updateExistingParent", "updateExistingVersion", "createNewParent", "createNewVersion", "addToExistingVersion" ]
            },
            "audits" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/Audit"
              }
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AuditImportJobMetadata" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "jobId" : {
              "type" : "string"
            },
            "jobType" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "in_progress", "error", "validation_error", "success" ]
            },
            "messagingServiceId" : {
              "type" : "string"
            },
            "payload" : {
              "$ref" : "#/components/schemas/BulkAuditImportDTO"
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AuditImportJobsMetadataResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AuditImportJobMetadata"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "AuditJob" : {
          "required" : [ "auditEntityType", "auditOperationType", "contextId", "contextType", "state" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "integer",
              "format" : "int64"
            },
            "state" : {
              "type" : "string",
              "enum" : [ "completed", "failed", "started" ]
            },
            "scanId" : {
              "type" : "string"
            },
            "contextId" : {
              "type" : "string"
            },
            "contextType" : {
              "type" : "string"
            },
            "auditEntityType" : {
              "type" : "string",
              "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
            },
            "auditOperationType" : {
              "type" : "string",
              "enum" : [ "aggregateAudit", "audit", "deleteAll", "designerMapping", "designerUpdate", "runtimeMapping", "runtimeUpdate", "scan", "updateRelationships" ]
            },
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AuditJobResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AuditJob"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "AuditRelationDTO" : {
          "type" : "object",
          "properties" : {
            "auditEntityType" : {
              "type" : "string"
            },
            "auditId" : {
              "type" : "string"
            },
            "identifier" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string"
            }
          },
          "readOnly" : true
        },
        "AuditResult" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "eventBrokerId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "auditEntityType" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "solaceQueue"
            },
            "eventBrokerName" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "My Solace Service"
            },
            "identifier" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "orderEventQueue"
            },
            "status" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "partialMatch"
            },
            "schemaType" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AuditResultDetail" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "parentId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "versionId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "entityId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "scanId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "status" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "partialMatch"
            },
            "identifier" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "orderEventQueue"
            },
            "relations" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/AuditRelationDTO"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "AuditResultDetailResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/AuditResultDetail"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "AuditResultStatsDTO" : {
          "type" : "object",
          "properties" : {
            "auditStatusDistribution" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "integer",
                "format" : "int32"
              }
            },
            "auditAssociatedTagIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "eventBrokerIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "nonDraftAuditIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "auditDetail" : {
              "type" : "object",
              "additionalProperties" : {
                "$ref" : "#/components/schemas/AuditDetail"
              }
            }
          }
        },
        "AuditResultStatsRequestDTO" : {
          "type" : "object",
          "properties" : {
            "auditEntityType" : {
              "type" : "string",
              "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
            },
            "eventMeshId" : {
              "type" : "string"
            },
            "eventBrokerIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "hidden" : {
              "type" : "boolean"
            },
            "statuses" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "designerOnly", "match", "partialMatch", "runtimeOnly" ]
              }
            },
            "tags" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "To Be Created", "To Be Deleted" ]
              }
            },
            "excludedIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "startsWith" : {
              "type" : "string"
            },
            "contains" : {
              "type" : "string"
            }
          }
        },
        "AuditResultsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AuditResult"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "AuditsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Audit"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "BulkAuditImportDTO" : {
          "type" : "object",
          "properties" : {
            "auditImports" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AuditImportDTO"
              }
            }
          }
        },
        "ChangeAppDomainEntitiesDTO" : {
          "type" : "object",
          "properties" : {
            "targetAppDomainId" : {
              "type" : "string"
            },
            "entities" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TargetEntitiesRequestDTO"
              }
            }
          }
        },
        "Configuration" : {
          "required" : [ "configurationType", "configurationTypeId", "contextId", "entityId", "entityType" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "contextType" : {
              "type" : "string",
              "enum" : [ "EVENT_BROKER" ]
            },
            "contextId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "configurationTypeId" : {
              "type" : "string",
              "description" : "Refer <a href=\"/cloud/reference/getconfigurationtypes\">here</a> for details on configuration types.",
              "example" : "v0u717y2oiy"
            },
            "configurationType" : {
              "type" : "string",
              "description" : "Refer <a href=\"/cloud/reference/getconfigurationtypes\">here</a> for details on configuration types.",
              "example" : "solaceClientUsername"
            },
            "entityType" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "consumer",
              "enum" : [ "address", "application", "applicationVersion", "audit", "consumer", "eventVersion", "schema", "schemaVersion", "subscription" ]
            },
            "entityId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "identifier" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "abc|123"
            },
            "value" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ConfigurationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/Configuration"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ConfigurationType" : {
          "required" : [ "brokerType", "name" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "name" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "solaceQueue"
            },
            "brokerType" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "solace"
            },
            "associatedEntityTypes" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"eventVersion\",\"applicationVersion\",\"consumer\"]"
              }
            },
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "valueSchema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "ConfigurationTypeResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/ConfigurationType"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ConfigurationTypesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ConfigurationType"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "ConfigurationsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Configuration"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "Consumer" : {
          "required" : [ "applicationVersionId" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "name" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "My First Consumer"
            },
            "applicationVersionId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "brokerType" : {
              "type" : "string",
              "example" : "solace"
            },
            "consumerType" : {
              "type" : "string",
              "example" : "eventQueue"
            },
            "subscriptions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Subscription"
              }
            },
            "type" : {
              "type" : "string"
            }
          },
          "readOnly" : true
        },
        "ConsumerResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/Consumer"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ConsumersResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Consumer"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "CustomAttribute" : {
          "type" : "object",
          "properties" : {
            "customAttributeDefinitionId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "customAttributeDefinitionName" : {
              "pattern" : "a-zA-Z0-9_\\-\\.",
              "type" : "string",
              "example" : "color"
            },
            "value" : {
              "pattern" : "a-zA-Z0-9_\\-\\.",
              "type" : "string",
              "example" : "red"
            }
          }
        },
        "CustomAttributeDefinition" : {
          "required" : [ "scope" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "name" : {
              "pattern" : "[a-zA-Z0-9\\._-]+",
              "type" : "string",
              "example" : "colour"
            },
            "valueType" : {
              "type" : "string",
              "enum" : [ "STRING", "LONG_TEXT" ]
            },
            "scope" : {
              "type" : "string",
              "enum" : [ "organization", "applicationDomain" ]
            },
            "associatedEntityTypes" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"event\",\"application\"]"
              }
            },
            "associatedEntities" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AssociatedEntity"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "CustomAttributeDefinitionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/CustomAttributeDefinition"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "CustomAttributeDefinitionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttributeDefinition"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "CustomAttributeFrontEndDTO" : {
          "required" : [ "scope" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "name" : {
              "pattern" : "[a-zA-Z0-9\\._-]+",
              "type" : "string",
              "example" : "colour"
            },
            "valueType" : {
              "type" : "string",
              "enum" : [ "STRING", "LONG_TEXT" ]
            },
            "scope" : {
              "type" : "string",
              "enum" : [ "organization", "applicationDomain" ]
            },
            "associatedEntityTypes" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"event\",\"application\"]"
              }
            },
            "associatedEntities" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AssociatedEntity"
              }
            },
            "valuesEntityTypes" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "values" : {
              "type" : "array",
              "items" : {
                "type" : "object"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "CustomAttributesFrontEndResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttributeFrontEndDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "DeliveryDescriptor" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "brokerType" : {
              "type" : "string"
            },
            "address" : {
              "$ref" : "#/components/schemas/Address"
            },
            "keySchemaVersionId" : {
              "type" : "string",
              "example" : "shb3mlyec2g"
            },
            "keySchemaPrimitiveType" : {
              "type" : "string",
              "example" : "BYTES",
              "enum" : [ "BOOLEAN", "BYTES", "DOUBLE", "FLOAT", "INT", "LONG", "NULL", "NUMBER", "STRING" ]
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "DesignerMappingDTO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "messagingServiceId" : {
              "type" : "string"
            },
            "auditEntityType" : {
              "type" : "string",
              "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
            },
            "identifier" : {
              "type" : "string"
            },
            "attributes" : {
              "type" : "string"
            },
            "entityId" : {
              "type" : "string"
            },
            "versionId" : {
              "type" : "string"
            },
            "parentId" : {
              "type" : "string"
            }
          },
          "readOnly" : true
        },
        "EPResponseSetString" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "Entitlement" : {
          "type" : "object",
          "properties" : {
            "resourceType" : {
              "$ref" : "#/components/schemas/ResourceType"
            },
            "attributes" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            },
            "actions" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "readOnly" : true
        },
        "EntityType" : {
          "type" : "object",
          "properties" : {
            "value" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "consumer"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EntityTypesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EntityType"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "Environment" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz123abc"
            },
            "name" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "Staging environment"
            },
            "description" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "The description of my environment"
            },
            "revision" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "numberOfEventMeshes" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "configPush" : {
              "type" : "string",
              "enum" : [ "auto", "disabled" ]
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "EnvironmentResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/Environment"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EnvironmentsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Environment"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EpUserEntitlements" : {
          "type" : "object",
          "properties" : {
            "userId" : {
              "type" : "string",
              "readOnly" : true
            },
            "entitlements" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/Entitlement"
              }
            },
            "id" : {
              "type" : "string",
              "readOnly" : true
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "EpUserEntitlementsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EpUserEntitlements"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ErrorResponse" : {
          "type" : "object",
          "properties" : {
            "message" : {
              "type" : "string",
              "example" : "An error occurred"
            },
            "errorId" : {
              "type" : "string",
              "example" : "123e4567-e89b-12d3-a456-426655440000"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "example" : "'object': { 'field': 'description' }"
              },
              "example" : "'object': { 'field': 'description' }"
            },
            "validationDetails" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "array",
                "example" : "'name': ['Not unique']",
                "items" : {
                  "type" : "string",
                  "example" : "'name': ['Not unique']"
                }
              },
              "example" : "'name': ['Not unique']"
            },
            "errorType" : {
              "type" : "string",
              "writeOnly" : true
            }
          },
          "discriminator" : {
            "propertyName" : "errorType"
          }
        },
        "Event" : {
          "required" : [ "applicationDomainId", "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "name" : {
              "maxLength" : 2048,
              "minLength" : 1,
              "type" : "string",
              "example" : "My First Event"
            },
            "shared" : {
              "type" : "boolean",
              "example" : false
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "brokerType" : {
              "type" : "string",
              "example" : "kafka"
            },
            "numberOfVersions" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "EventApi" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "name" : {
              "maxLength" : 60,
              "minLength" : 1,
              "type" : "string",
              "description" : "The name of the event api.",
              "example" : "Apitest"
            },
            "shared" : {
              "type" : "boolean",
              "example" : true
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "numberOfVersions" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true,
              "example" : 3
            },
            "brokerType" : {
              "type" : "string",
              "description" : "The type of the broker used for the event API",
              "enum" : [ "kafka", "solace" ],
              "default" : "solace"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, eventApi.",
              "readOnly" : true
            }
          }
        },
        "EventApiProduct" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server",
              "readOnly" : true,
              "example" : "12345"
            },
            "name" : {
              "maxLength" : 60,
              "minLength" : 1,
              "type" : "string",
              "description" : "The name of the event API product",
              "example" : "EventApiProductTest"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "abcappdomainid"
            },
            "shared" : {
              "type" : "boolean",
              "example" : true
            },
            "numberOfVersions" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true,
              "example" : 3
            },
            "brokerType" : {
              "type" : "string",
              "description" : "The type of the broker used for the event API product",
              "enum" : [ "kafka", "solace" ],
              "default" : "solace"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true
            }
          }
        },
        "EventApiProductRegistration" : {
          "required" : [ "accessRequestId", "applicationDomainId", "eventApiProductVersionId", "planId", "registrationId" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "registrationId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "accessRequestId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "eventApiProductVersionId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "planId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "state" : {
              "type" : "string",
              "enum" : [ "Pending Approval", "Rejected", "Revoked", "Approved", "Error", "Live" ]
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true,
              "default" : "eventApiProductRegistration"
            },
            "customAttributes" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            }
          }
        },
        "EventApiProductRegistrationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventApiProductRegistration"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventApiProductRegistrationsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProductRegistration"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventApiProductResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventApiProduct"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventApiProductVersion" : {
          "required" : [ "eventApiProductId" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "eventApiProductId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "description" : {
              "maxLength" : 10000,
              "type" : "string",
              "example" : "Event API product created by Solace PubSub+ Cloud documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "summary" : {
              "type" : "string",
              "example" : "Summary string value of event API product version"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "displayName" : {
              "maxLength" : 40,
              "type" : "string",
              "example" : "Event API product version display name"
            },
            "eventApiVersionIds" : {
              "type" : "array",
              "description" : "List of IDs of associated event API versions",
              "items" : {
                "type" : "string",
                "description" : "List of IDs of associated event API versions"
              }
            },
            "stateId" : {
              "type" : "string",
              "example" : "1"
            },
            "eventApiProductRegistrations" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProductRegistration"
              }
            },
            "plans" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Plan"
              }
            },
            "solaceMessagingServices" : {
              "type" : "array",
              "description" : "Solace Messaging Services",
              "items" : {
                "$ref" : "#/components/schemas/SolaceMessagingService"
              }
            },
            "filters" : {
              "type" : "array",
              "description" : "List of filters that contains eventVersionId name and variables",
              "items" : {
                "$ref" : "#/components/schemas/Filter"
              }
            },
            "approvalType" : {
              "type" : "string",
              "description" : "Approval type",
              "enum" : [ "automatic", "manual" ],
              "default" : "automatic"
            },
            "publishState" : {
              "type" : "string",
              "description" : "Publish state",
              "enum" : [ "unset", "published" ],
              "default" : "unset"
            },
            "publishedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true
            }
          }
        },
        "EventApiProductVersionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventApiProductVersion"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventApiProductVersionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProductVersion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventApiProductsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiProduct"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventApiResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventApi"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventApiVersion" : {
          "required" : [ "eventApiId" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "eventApiId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "description" : {
              "maxLength" : 10000,
              "type" : "string",
              "example" : "Event Api created by Solace PubSub+ Cloud documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "type" : "string",
              "example" : "Display name for the eventApi version"
            },
            "producedEventVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "consumedEventVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredEventApiProductVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "stateId" : {
              "type" : "string",
              "example" : "1"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EventApiVersionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventApiVersion"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventApiVersionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApiVersion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventApisResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventApi"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventBrokerDataCollectionUploadResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventBrokerScanDataUploadDetails"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventBrokerScanData" : {
          "required" : [ "data" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "p92u412l8xw"
            },
            "eventBrokerId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "acb2j5k3mly"
            },
            "data" : {
              "$ref" : "#/components/schemas/JsonNode"
            },
            "scanTypes" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "KAFKA_ALL", "KAFKA_BROKER_CONFIGURATION", "KAFKA_CLUSTER_CONFIGURATION", "KAFKA_CONSUMER_GROUPS", "KAFKA_CONSUMER_GROUPS_CONFIGURATION", "KAFKA_FEATURES", "KAFKA_PRODUCERS", "KAFKA_TOPIC_CONFIGURATION", "KAFKA_TOPIC_CONFIGURATION_FULL", "KAFKA_TOPIC_LISTING", "KAFKA_TOPIC_OVERRIDE_CONFIGURATION", "CONFLUENT_SCHEMA_REGISTRY_SCHEMA", "SOLACE_ALL", "SOLACE_QUEUE_CONFIG", "SOLACE_QUEUE_LISTING", "SOLACE_SUBSCRIPTION_CONFIG" ]
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, ema data collection.",
              "readOnly" : true
            }
          }
        },
        "EventBrokerScanDataUploadDetails" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "p92u412l8xw"
            },
            "scanId" : {
              "type" : "string",
              "description" : "The ID of the uploaded scan request.",
              "readOnly" : true,
              "example" : "p92u412l8xw"
            },
            "eventBrokerId" : {
              "type" : "string",
              "description" : "The event broker id of the data collection upload request.",
              "readOnly" : true,
              "example" : "acb2j5k3mly"
            },
            "eventBrokerType" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "Kafka",
              "enum" : [ "solace", "kafka" ]
            },
            "dataCollectionTypes" : {
              "type" : "array",
              "description" : "The uploaded data collection types.",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "description" : "The uploaded data collection types.",
                "readOnly" : true,
                "enum" : [ "brokerConfiguration", "clusterConfiguration", "consumerGroups", "consumerGroupConfiguration", "overrideTopicConfiguration", "queueConfiguration", "queueListing", "schema", "subscriptionConfiguration", "topicConfiguration", "topicListing" ]
              }
            },
            "status" : {
              "type" : "string",
              "description" : "The status of the event broker scan.",
              "readOnly" : true,
              "example" : "COMPLETE",
              "enum" : [ "COMPLETE", "FAILED", "INITIATED", "IN_PROGRESS", "TIMED_OUT", "TIMED_OUT_ON_INITIATION", "TIMED_OUT_ON_NO_DATA", "TIMED_OUT_ON_PARTIAL_DATA" ]
            },
            "scanTypes" : {
              "type" : "array",
              "description" : "The scan types for which the data is uploaded.",
              "readOnly" : true,
              "example" : "KAFKA_ALL",
              "items" : {
                "type" : "string",
                "description" : "The scan types for which the data is uploaded.",
                "readOnly" : true,
                "example" : "KAFKA_ALL",
                "enum" : [ "KAFKA_ALL", "KAFKA_BROKER_CONFIGURATION", "KAFKA_CLUSTER_CONFIGURATION", "KAFKA_CONSUMER_GROUPS", "KAFKA_CONSUMER_GROUPS_CONFIGURATION", "KAFKA_FEATURES", "KAFKA_PRODUCERS", "KAFKA_TOPIC_CONFIGURATION", "KAFKA_TOPIC_CONFIGURATION_FULL", "KAFKA_TOPIC_LISTING", "KAFKA_TOPIC_OVERRIDE_CONFIGURATION", "CONFLUENT_SCHEMA_REGISTRY_SCHEMA", "SOLACE_ALL", "SOLACE_QUEUE_CONFIG", "SOLACE_QUEUE_LISTING", "SOLACE_SUBSCRIPTION_CONFIG" ]
              }
            },
            "destinations" : {
              "type" : "array",
              "description" : "The data upload destination.",
              "readOnly" : true,
              "example" : "EVENT_PORTAL",
              "items" : {
                "type" : "string",
                "description" : "The data upload destination.",
                "readOnly" : true,
                "example" : "EVENT_PORTAL",
                "enum" : [ "EVENT_PORTAL", "FILE_WRITER" ]
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, ema data collection.",
              "readOnly" : true
            }
          }
        },
        "EventManagementAgent" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "sdagkjlh32x"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the EMA.",
              "example" : "primary event management agent"
            },
            "region" : {
              "type" : "string",
              "description" : "The region in which the EMA belongs to, extracted from the EventManagementAgentRegion.",
              "readOnly" : true,
              "example" : "North America"
            },
            "clientUsername" : {
              "type" : "string",
              "description" : "The SMF username for a customer's EMA to use to communicate to event-portal.",
              "readOnly" : true,
              "example" : "sadhkjl2325sak"
            },
            "clientPassword" : {
              "type" : "string",
              "description" : "The SMF password for a customer's EMA to use to communicate to event-portal.",
              "readOnly" : true,
              "example" : "SomePassword"
            },
            "referencedByMessagingServiceIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "description" : "The list of messagingServiceIds user provides in GET APIs to filter the results.",
                "readOnly" : true,
                "example" : "[\"1kjdsf32\",\"9875ksdf\"]"
              }
            },
            "orgId" : {
              "type" : "string",
              "description" : "Used by admin APIs to get a list of EMAs against the given orgId",
              "readOnly" : true,
              "example" : "897xd32"
            },
            "status" : {
              "type" : "string",
              "description" : "The connection status of EP to the actual EMA which this object represents.",
              "readOnly" : true,
              "example" : "Connected"
            },
            "lastConnectedTime" : {
              "type" : "string",
              "description" : "The timestamp of last heartbeat received from the EMA",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "version" : {
              "type" : "string",
              "description" : "The version of the current connected EMA",
              "readOnly" : true,
              "example" : "1.1.2"
            },
            "runtimeAgentMode" : {
              "type" : "string",
              "description" : "The mode in which the EMA operates.",
              "readOnly" : true,
              "example" : "Scan With Event Portal",
              "enum" : [ "scanWithEventPortal", "uploadScanFile" ]
            },
            "updateRequired" : {
              "type" : "boolean",
              "description" : "Does this EMA require upgrade to latest released version.",
              "readOnly" : true,
              "example" : true
            },
            "eventManagementAgentRegionId" : {
              "type" : "string",
              "description" : "The ID of the associated EventManagementAgentRegion.",
              "example" : "sdfkjh3242ds"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "EventManagementAgentRegion" : {
          "required" : [ "cloudProvider", "host", "msgVpn", "name", "region", "serviceId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "serviceId" : {
              "type" : "string",
              "description" : "The id of the service from maas-core.",
              "example" : "67890x23vh"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the EventManagementAgentRegion.",
              "example" : "primary region"
            },
            "cloudProvider" : {
              "type" : "string",
              "description" : "The name of the cloud provider.",
              "example" : "AWS"
            },
            "region" : {
              "type" : "string",
              "description" : "The name of the region.",
              "example" : "us-east"
            },
            "host" : {
              "type" : "string",
              "description" : "The host name of the region.",
              "example" : "mr-connection-sdtwexd.messaging.solace.cloud"
            },
            "msgVpn" : {
              "type" : "string",
              "description" : "The name of the region's msgVpn.",
              "example" : "fooivmr1"
            },
            "port" : {
              "type" : "integer",
              "description" : "The SMF port number.",
              "format" : "int32",
              "example" : 55443
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "updatedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            }
          }
        },
        "EventManagementAgentRegionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventManagementAgentRegion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventManagementAgentResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventManagementAgent"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventManagementAgentRunCommand" : {
          "required" : [ "formattedDockerRunCommand", "rawDockerRunCommand" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "rawDockerRunCommand" : {
              "type" : "string",
              "description" : "The raw docker run command used to start the Event Management Agent.",
              "readOnly" : true,
              "example" : "docker run -d"
            },
            "formattedDockerRunCommand" : {
              "type" : "string",
              "description" : "The formatted docker run command used to start the Event Management Agent.",
              "readOnly" : true,
              "example" : "docker run -d <span>ema</span>"
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EventManagementAgentRunCommandResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventManagementAgentRunCommand"
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventManagementAgentsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventManagementAgent"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventMesh" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "name" : {
              "maxLength" : 40,
              "minLength" : 1,
              "type" : "string",
              "description" : "The name of the event mesh.",
              "example" : "Inventory"
            },
            "environmentId" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "description" : "The environmentId of the Event Mesh",
              "example" : "67890"
            },
            "description" : {
              "maxLength" : 10000,
              "minLength" : 1,
              "type" : "string",
              "description" : "The description of the event mesh.",
              "example" : "The Inventory Event Meshapplications."
            },
            "brokerType" : {
              "type" : "string",
              "description" : "The type of the broker used in the event mesh.",
              "enum" : [ "kafka", "solace" ]
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, eventMesh.",
              "readOnly" : true
            }
          }
        },
        "EventMeshFrontEndDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "environmentName" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "environmentId" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "brokerType" : {
              "type" : "string"
            },
            "applicationVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "referencedByMessagingServiceIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EventMeshFrontEndResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventMeshFrontEndDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventMeshResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventMesh"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventMeshesFrontEndResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventMeshFrontEndDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventMeshesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventMesh"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/Event"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventV2KpiMetric" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "eventVersionId" : {
              "type" : "string"
            },
            "eventId" : {
              "type" : "string"
            },
            "eventName" : {
              "type" : "string"
            },
            "semanticVersion" : {
              "type" : "string"
            },
            "stateId" : {
              "type" : "string"
            },
            "shared" : {
              "type" : "boolean"
            },
            "consumerCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "brokerType" : {
              "type" : "string"
            },
            "topicAddress" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EventV2KpiMetricResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventV2KpiMetric"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventVersion" : {
          "required" : [ "eventId", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "eventId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "description" : {
              "maxLength" : 10000,
              "type" : "string",
              "example" : "Event version created by Solace PubSub+ Cloud documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "minLength" : 0,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "declaredProducingApplicationVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredConsumingApplicationVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "producingEventApiVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "consumingEventApiVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "attractingApplicationVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/AttractingApplicationVersionTuple"
              }
            },
            "schemaVersionId" : {
              "type" : "string",
              "example" : "shb3mlyec2g"
            },
            "schemaPrimitiveType" : {
              "type" : "string",
              "example" : "BYTES",
              "enum" : [ "BOOLEAN", "BYTES", "DOUBLE", "FLOAT", "INT", "LONG", "NULL", "NUMBER", "STRING" ]
            },
            "deliveryDescriptor" : {
              "$ref" : "#/components/schemas/DeliveryDescriptor"
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "messagingServiceIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EventVersionFrontend" : {
          "required" : [ "eventId", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "eventId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "description" : {
              "maxLength" : 10000,
              "type" : "string",
              "example" : "Event version created by Solace PubSub+ Cloud documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "minLength" : 0,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "declaredProducingApplicationVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredConsumingApplicationVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "producingEventApiVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "consumingEventApiVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "attractingApplicationVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/AttractingApplicationVersionTuple"
              }
            },
            "schemaVersionId" : {
              "type" : "string",
              "example" : "shb3mlyec2g"
            },
            "schemaPrimitiveType" : {
              "type" : "string",
              "example" : "BYTES",
              "enum" : [ "BOOLEAN", "BYTES", "DOUBLE", "FLOAT", "INT", "LONG", "NULL", "NUMBER", "STRING" ]
            },
            "deliveryDescriptor" : {
              "$ref" : "#/components/schemas/DeliveryDescriptor"
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "messagingServiceIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "declaredProducingApplicationVersionIdsInEventMesh" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "declaredConsumingApplicationVersionIdsInEventMesh" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "parentName" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "EventVersionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/EventVersion"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "EventVersionsFrontendResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventVersionFrontend"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventVersionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/EventVersion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "EventsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Event"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "Filter" : {
          "type" : "object",
          "properties" : {
            "eventVersionId" : {
              "type" : "string",
              "example" : "123456"
            },
            "topicFilters" : {
              "type" : "array",
              "description" : "List of variable that contains address node name and filters",
              "items" : {
                "$ref" : "#/components/schemas/TopicFilter"
              }
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true,
              "default" : "filter"
            }
          },
          "description" : "List of filters that contains eventVersionId name and variables"
        },
        "GatewayMessagingService" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "messagingServiceId" : {
              "type" : "string"
            },
            "eventApiProductVersionId" : {
              "type" : "string"
            },
            "supportedProtocols" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "smfc", "smf", "smfs", "amqp", "amqps", "mqtt", "mqtts", "mqttws", "mqttwss", "secure-mqtt", "secure-mqttws", "rest", "rests" ]
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "GatewayMessagingServiceResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/GatewayMessagingService"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "GraphEdgeDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "sourceId" : {
              "type" : "string"
            },
            "destinationId" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "GraphModelDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "orgId" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "graphType" : {
              "type" : "string"
            },
            "context" : {
              "type" : "string"
            },
            "contextId" : {
              "type" : "string"
            },
            "nodes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GraphNodeWrapperDTO"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "GraphModelResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/GraphModelDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "GraphModelsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GraphModelDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "GraphNodeDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "graphModelId" : {
              "type" : "string"
            },
            "displayName" : {
              "type" : "string"
            },
            "position" : {
              "$ref" : "#/components/schemas/GraphNodePosition"
            },
            "nodeType" : {
              "type" : "string"
            },
            "references" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GraphNodeReferenceDTO"
              }
            },
            "extendedAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GraphNodeExtendedAttributeDTO"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "GraphNodeExtendedAttributeDTO" : {
          "type" : "object",
          "properties" : {
            "attributeName" : {
              "type" : "string"
            },
            "value" : {
              "type" : "string"
            }
          }
        },
        "GraphNodePosition" : {
          "type" : "object",
          "properties" : {
            "xcoordinate" : {
              "type" : "number",
              "format" : "double"
            },
            "ycoordinate" : {
              "type" : "number",
              "format" : "double"
            }
          }
        },
        "GraphNodeReferenceDTO" : {
          "type" : "object",
          "properties" : {
            "referenceId" : {
              "type" : "string"
            },
            "referenceType" : {
              "type" : "string"
            }
          }
        },
        "GraphNodeResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/GraphNodeDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "GraphNodeWrapperDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "node" : {
              "$ref" : "#/components/schemas/GraphNodeDTO"
            },
            "edges" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GraphEdgeDTO"
              }
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "GraphNodesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/GraphNodeWrapperDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ImportActionPreviewResultDTO" : {
          "type" : "object",
          "properties" : {
            "entityCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "auditIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "relatedDesignerEntityIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "InvalidNonStateReference" : {
          "type" : "object",
          "properties" : {
            "entityId" : {
              "type" : "string"
            },
            "entityType" : {
              "type" : "string"
            }
          }
        },
        "InvalidStateReference" : {
          "type" : "object",
          "allOf" : [ {
            "$ref" : "#/components/schemas/ErrorResponse"
          }, {
            "type" : "object",
            "properties" : {
              "targetStateId" : {
                "type" : "string"
              },
              "inboundInvalidNonStateReferences" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InvalidNonStateReference"
                }
              },
              "inboundInvalidStateReferences" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InvalidStateReference"
                }
              },
              "outboundInvalidStateReferences" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/InvalidStateReference"
                }
              },
              "errorType" : {
                "type" : "string"
              }
            }
          } ]
        },
        "JobAdministrationDTO" : {
          "type" : "object",
          "properties" : {
            "jobId" : {
              "type" : "string"
            },
            "orgId" : {
              "type" : "string"
            },
            "jobType" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "in_progress", "error", "validation_error", "success" ]
            },
            "loggingReason" : {
              "type" : "string"
            },
            "jobDetails" : {
              "type" : "string"
            },
            "createdTime" : {
              "type" : "string"
            },
            "updatedTime" : {
              "type" : "string"
            },
            "createdBy" : {
              "type" : "string"
            },
            "changedBy" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "JobBO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "jobType" : {
              "$ref" : "#/components/schemas/JobType"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "in_progress", "error", "validation_error", "success" ]
            },
            "details" : {
              "type" : "string"
            },
            "results" : {
              "type" : "string",
              "format" : "byte"
            },
            "error" : {
              "type" : "string",
              "format" : "byte"
            },
            "orgId" : {
              "type" : "string"
            },
            "createdTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "changedBy" : {
              "type" : "string"
            },
            "createdBy" : {
              "type" : "string"
            }
          }
        },
        "JobDTO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "in_progress", "error", "validation_error", "success" ]
            },
            "jobType" : {
              "type" : "string"
            },
            "error" : {
              "type" : "object"
            },
            "results" : {
              "type" : "object"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "JobType" : {
          "type" : "object"
        },
        "JsonNode" : {
          "type" : "object"
        },
        "KafkaConsumerGroupAuditResultSetDTO" : {
          "type" : "object",
          "properties" : {
            "aggregateAuditResult" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "kafkaConsumerGroupAuditResults" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Audit"
              }
            },
            "id" : {
              "type" : "string",
              "readOnly" : true
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "KafkaConsumerGroupAuditResultSetResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/KafkaConsumerGroupAuditResultSetDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "KafkaConsumerGroupAuditResultSetsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/KafkaConsumerGroupAuditResultSetDTO"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "KafkaTopicAuditResultSet" : {
          "type" : "object",
          "properties" : {
            "eventIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true
              }
            },
            "aggregateAuditResult" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "topicAudit" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "kafkaTopicSchemaParentRelationAuditResultSets" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/KafkaTopicSchemaParentRelationAuditResultSet"
              }
            },
            "id" : {
              "type" : "string",
              "readOnly" : true
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "KafkaTopicAuditResultSetResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/KafkaTopicAuditResultSet"
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "KafkaTopicAuditResultSetsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/KafkaTopicAuditResultSet"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "KafkaTopicSchemaParentRelationAuditResultSet" : {
          "type" : "object",
          "properties" : {
            "eventId" : {
              "type" : "string",
              "readOnly" : true
            },
            "schemaParentAudit" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "kafkaTopicSchemaParentRelationAudit" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "kafkaTopicSchemaVersionRelationAuditResultSets" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/KafkaTopicSchemaVersionRelationAuditResultSet"
              }
            }
          }
        },
        "KafkaTopicSchemaVersionRelationAuditResultSet" : {
          "type" : "object",
          "properties" : {
            "eventVersionId" : {
              "type" : "string"
            },
            "schemaVersionAudit" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "kafkaTopicSchemaVersionRelationAudit" : {
              "$ref" : "#/components/schemas/Audit"
            }
          }
        },
        "KpiEventReuseMetricDTO" : {
          "type" : "object",
          "properties" : {
            "sharedReuseIndex" : {
              "type" : "number"
            },
            "sharedTotalEvents" : {
              "type" : "integer",
              "format" : "int64"
            },
            "sharedConsumerCount" : {
              "type" : "integer",
              "format" : "int64"
            },
            "nonSharedReuseIndex" : {
              "type" : "number"
            },
            "nonSharedTotalEvents" : {
              "type" : "integer",
              "format" : "int64"
            },
            "nonSharedConsumerCount" : {
              "type" : "integer",
              "format" : "int64"
            },
            "brokerType" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "KpiMetrics" : {
          "type" : "object",
          "properties" : {
            "orgId" : {
              "type" : "string"
            },
            "applicationDomainId" : {
              "type" : "string"
            },
            "kafkaKpiMetrics" : {
              "$ref" : "#/components/schemas/KpiEventReuseMetricDTO"
            },
            "solaceKpiMetrics" : {
              "$ref" : "#/components/schemas/KpiEventReuseMetricDTO"
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "KpiMetricsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/KpiMetrics"
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "LoadSampleOperationDTO" : {
          "type" : "object",
          "properties" : {
            "sampleCollectionName" : {
              "type" : "string",
              "enum" : [ "kafka-acme-sample" ]
            },
            "sampleCollectionVersion" : {
              "type" : "string",
              "enum" : [ "v1" ]
            },
            "environmentVariables" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "example" : {
                  "token" : "********************"
                }
              },
              "example" : {
                "token" : "********************"
              }
            }
          }
        },
        "MergeApplicationVersionsDTO" : {
          "required" : [ "applicationDomainId", "applicationVersionIds", "name", "version" ],
          "type" : "object",
          "properties" : {
            "name" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "example" : "My First Merge Application"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "applicationVersionIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "smartMergeEnable" : {
              "type" : "boolean",
              "example" : false
            }
          }
        },
        "MessagingService" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "asdkl234x"
            },
            "eventMeshId" : {
              "type" : "string",
              "description" : "The eventMeshId associated to the messaging service.",
              "example" : "67890x23vh"
            },
            "runtimeAgentId" : {
              "type" : "string",
              "description" : "The runtimeAgentId associated to the messaging service.",
              "example" : "vh1234y14"
            },
            "solaceCloudMessagingServiceId" : {
              "type" : "string",
              "description" : "The solaceCloudMessagingServiceId associated to the messaging service.",
              "example" : "abcd1234x"
            },
            "messagingServiceType" : {
              "type" : "string",
              "description" : "The type of the messaging service.",
              "example" : "solace",
              "enum" : [ "solace", "kafka" ]
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the messaging service.",
              "example" : "first messagingService"
            },
            "messagingServiceConnections" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceConnection"
              }
            },
            "eventManagementAgentId" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceAssociationDTO" : {
          "type" : "object",
          "properties" : {
            "messagingServiceIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            }
          }
        },
        "MessagingServiceAssociationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/MessagingServiceAssociationDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "MessagingServiceAuthentication" : {
          "required" : [ "authenticationType", "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "kjsfg32ds"
            },
            "messagingServiceConnectionId" : {
              "type" : "string",
              "description" : "The ID of the connection object associated to the authentication object.",
              "readOnly" : true,
              "example" : "sdafgj23"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the authentication object.",
              "example" : "https auth details"
            },
            "authenticationType" : {
              "type" : "string",
              "description" : "The type of the authentication object.",
              "example" : "basicAuthentication"
            },
            "authenticationDetails" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "description" : "A JSON map containing a map of extra details for the authentication.",
                "example" : {
                  "broker owner" : "Solace PE team"
                }
              },
              "description" : "A JSON map containing a map of extra details for the authentication.",
              "example" : {
                "broker owner" : "Solace PE team"
              }
            },
            "messagingServiceCredentials" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceCredentials"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceConnection" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "5432dfg3"
            },
            "messagingServiceId" : {
              "type" : "string",
              "description" : "The messagingServiceId associated to the connection object.",
              "readOnly" : true,
              "example" : "sdkjhg21948"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the connection object.",
              "example" : "my https connection"
            },
            "url" : {
              "type" : "string",
              "description" : "The url of the connection object.",
              "example" : "https://abcd.messaging.solace.cloud:943"
            },
            "protocol" : {
              "type" : "string",
              "description" : "The protocol of the connection object.",
              "example" : "https"
            },
            "protocolVersion" : {
              "type" : "string",
              "description" : "The protocolVersion of the connection object.",
              "example" : "2.0"
            },
            "bindings" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "description" : "A JSON map containing a map of connection-specific values. ",
                "example" : {
                  "msgVpn" : "myVPN"
                }
              },
              "description" : "A JSON map containing a map of connection-specific values. ",
              "example" : {
                "msgVpn" : "myVPN"
              }
            },
            "messagingServiceAuthentications" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceAuthentication"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceCredentials" : {
          "required" : [ "credentials", "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "lkjdsfgew2"
            },
            "messagingServiceAuthenticationId" : {
              "type" : "string",
              "description" : "The ID of the authentication object associated to the credentials object.",
              "readOnly" : true,
              "example" : "sdafgj23"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the credentials object.",
              "example" : "basic auth credentials"
            },
            "credentials" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "description" : "A JSON map containing the credentials information.",
                "example" : {
                  "username" : "User1",
                  "password" : "secretPass"
                }
              },
              "description" : "A JSON map containing the credentials information.",
              "example" : {
                "username" : "User1",
                "password" : "secretPass"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceFrontEndDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "asdkl234x"
            },
            "eventMeshId" : {
              "type" : "string",
              "description" : "The eventMeshId associated to the messaging service.",
              "example" : "67890x23vh"
            },
            "runtimeAgentId" : {
              "type" : "string",
              "description" : "The runtimeAgentId associated to the messaging service.",
              "example" : "vh1234y14"
            },
            "solaceCloudMessagingServiceId" : {
              "type" : "string",
              "description" : "The solaceCloudMessagingServiceId associated to the messaging service.",
              "example" : "abcd1234x"
            },
            "messagingServiceType" : {
              "type" : "string",
              "description" : "The type of the messaging service.",
              "example" : "solace",
              "enum" : [ "solace", "kafka" ]
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the messaging service.",
              "example" : "first messagingService"
            },
            "messagingServiceConnections" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceConnection"
              }
            },
            "schemaRegistriesToCreate" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaRegistry"
              }
            },
            "schemaRegistriesToUpdate" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaRegistry"
              }
            },
            "schemaRegistriesToDissociate" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            },
            "eventManagementAgentId" : {
              "type" : "string"
            }
          }
        },
        "MessagingServiceInfoDTO" : {
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string"
            },
            "eventMeshId" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "MessagingServiceOperation" : {
          "required" : [ "scanTypes" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "kljhwe32"
            },
            "scanTypes" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "The list of scanTypes to be scanned.",
                "example" : "[\"KAFKA_ALL\",\"CONFLUENT_SCHEMA_REGISTRY_SCHEMA\"]",
                "enum" : [ "KAFKA_ALL", "CONFLUENT_SCHEMA_REGISTRY_SCHEMA", "SOLACE_ALL" ]
              }
            },
            "destinations" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "The list of destinations for EMA to send results to.",
                "example" : "[\"EVENT_PORTAL\",\"FILE_WRITER\"]",
                "enum" : [ "EVENT_PORTAL", "FILE_WRITER" ]
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceOperationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/MessagingServiceOperation"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "MessagingServiceRemoveAssociation" : {
          "type" : "object",
          "properties" : {
            "association" : {
              "type" : "string",
              "description" : "The target association to be removed from the messaging service.",
              "example" : "EVENT_MANAGEMENT_AGENT",
              "enum" : [ "RUNTIME_AGENT", "EVENT_MESH", "EVENT_MANAGEMENT_AGENT" ]
            }
          }
        },
        "MessagingServiceResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/MessagingService"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "MessagingServiceScan" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "status" : {
              "type" : "string",
              "description" : "The status of the messaging service scan.",
              "readOnly" : true,
              "example" : "FAILED"
            },
            "statusDescription" : {
              "type" : "string",
              "description" : "The description of the messaging service scan status.",
              "readOnly" : true,
              "example" : "Scan failed because some scanTypes failed to complete."
            },
            "messagingServiceId" : {
              "type" : "string",
              "description" : "The messagingServiceId of the scan.",
              "readOnly" : true,
              "example" : "67890x23vh"
            },
            "messagingServiceName" : {
              "type" : "string",
              "description" : "The messagingServiceName of the scan.",
              "readOnly" : true,
              "example" : "first solace messagingService"
            },
            "scanTypes" : {
              "type" : "string",
              "description" : "The scanTypes that were requested for the scan.",
              "readOnly" : true,
              "example" : "KAFKA_ALL"
            },
            "destinations" : {
              "type" : "string",
              "description" : "The destinations which EMA will send the scan results.",
              "readOnly" : true,
              "example" : "EVENT_PORTAL,FILE_WRITER"
            },
            "isUsedByAudit" : {
              "type" : "boolean",
              "description" : "Whether the scan is used by audit.",
              "readOnly" : true,
              "example" : false
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceScanData" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "scanId" : {
              "type" : "string",
              "description" : "The ID of the scan.",
              "readOnly" : true,
              "example" : "67890x23vh"
            },
            "dataCollectionType" : {
              "type" : "string",
              "description" : "The type of dataCollection this object holds scan data for.",
              "readOnly" : true,
              "example" : "consumerGroups",
              "enum" : [ "brokerConfiguration", "clusterConfiguration", "consumerGroups", "consumerGroupConfiguration", "overrideTopicConfiguration", "queueConfiguration", "queueListing", "schema", "subscriptionConfiguration", "topicConfiguration", "topicListing" ]
            },
            "data" : {
              "type" : "string",
              "description" : "The scan data in JSON format.",
              "readOnly" : true,
              "example" : "{\"name\":\"some solace queue name\"}"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceScanDataListResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceScanData"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "MessagingServiceScanDataResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/MessagingServiceScanData"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "MessagingServiceScanLog" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "scanId" : {
              "type" : "string",
              "description" : "The ID of the scan.",
              "readOnly" : true,
              "example" : "67890x23vh"
            },
            "log" : {
              "type" : "string",
              "description" : "The log message.",
              "readOnly" : true,
              "example" : "The Scan Is Done."
            },
            "logLevel" : {
              "type" : "string",
              "description" : "The level of the log message.",
              "readOnly" : true,
              "example" : "INFO"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "MessagingServiceScanLogListResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceScanLog"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "MessagingServiceScanResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/MessagingServiceScan"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "MessagingServiceScansResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceScan"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "MessagingServicesInfoResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingServiceInfoDTO"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "MessagingServicesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingService"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "OperationDTO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "operationType" : {
              "type" : "string"
            },
            "createdBy" : {
              "type" : "string"
            },
            "createdTime" : {
              "type" : "string"
            },
            "completedTime" : {
              "type" : "string"
            },
            "status" : {
              "type" : "string",
              "enum" : [ "in_progress", "error", "validation_error", "success" ]
            },
            "results" : {
              "type" : "object"
            },
            "error" : {
              "type" : "object"
            }
          }
        },
        "OperationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/OperationDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "OrgDTO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "eventPortalAccessEnabled" : {
              "type" : "boolean"
            },
            "topicAddressResourcesAccessEnabled" : {
              "type" : "boolean"
            },
            "createdTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "objectLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "objectVersionLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "applicationDomainLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "eventMeshLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "eventApiLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "eventApiProductLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "consumerLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "topicDomainLimitPerApplicationDomain" : {
              "type" : "integer",
              "format" : "int32"
            },
            "enumLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "enumValueLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "messagingServiceLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "configurationLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "subscriptionLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "subscriptionPerApplicationVersionLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "graphNodeLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "applicationDomainGraphNodeLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "schemaRegistryLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "objectRelationshipVisualizationLimit" : {
              "type" : "integer",
              "format" : "int32"
            },
            "productTier" : {
              "type" : "string",
              "enum" : [ "None", "Standard", "Small", "Medium", "Large", "Extra Large", "Custom" ]
            },
            "organizationType" : {
              "type" : "string",
              "enum" : [ "enterprise" ]
            },
            "stats" : {
              "$ref" : "#/components/schemas/OrgStats"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "OrgStats" : {
          "type" : "object",
          "properties" : {
            "schemaCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "schemaVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "applicationCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "applicationVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "applicationDomainCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventApiCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventApiVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "subscriptionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "consumerCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "enumCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "enumVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "enumValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventApiProductCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventApiProductVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "publishedEventApiProductVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "environmentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventMeshCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "applicationVersionsInEventMeshesCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "customAttributeDefinitionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "customAttributeCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "configurationCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "sumUniqueEventsInEachEnvironmentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "sumUniqueSchemasInEachEnvironmentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "sumUniqueApplicationsInEachEnvironmentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "messageServiceCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caGlobalDefParentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caGlobalParentValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caGlobalDefVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caGlobalVersionValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caAppDomainScopedDefParentCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caAppDomainScopedParentValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caAppDomainScopedDefVersionCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caAppDomainScopedVersionValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caAppDomainScopedAppDomainValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caAppDomainScopedAppDomainDefCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caGlobalAppDomainValueCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "caGlobalAppDomainDefCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            }
          }
        },
        "OrgsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/OrgDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "Pagination" : {
          "type" : "object",
          "properties" : {
            "pageNumber" : {
              "type" : "integer",
              "format" : "int32"
            },
            "count" : {
              "type" : "integer",
              "format" : "int32"
            },
            "pageSize" : {
              "type" : "integer",
              "format" : "int32"
            },
            "nextPage" : {
              "type" : "integer",
              "format" : "int32"
            },
            "totalPages" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "Plan" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "ID value of the object",
              "readOnly" : true,
              "example" : "123456"
            },
            "name" : {
              "type" : "string",
              "description" : "Title of the object",
              "example" : "Gold"
            },
            "solaceClassOfServicePolicy" : {
              "$ref" : "#/components/schemas/SolaceClassOfServicePolicy"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload",
              "readOnly" : true,
              "default" : "plan"
            }
          }
        },
        "PreviewEntityConfigurationDTO" : {
          "type" : "object",
          "properties" : {
            "type" : {
              "type" : "string",
              "enum" : [ "solaceQueue" ]
            },
            "identifier" : {
              "type" : "string"
            },
            "value" : {
              "type" : "string"
            },
            "errors" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "ResourceConnectionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/resourceConnectionDetails"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ResourceCredentialOperationsBO" : {
          "required" : [ "orgId" ],
          "type" : "object",
          "properties" : {
            "orgId" : {
              "type" : "string"
            },
            "createdTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "changedBy" : {
              "type" : "string"
            },
            "createdBy" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "credentialDetailsId" : {
              "type" : "string"
            },
            "entityType" : {
              "type" : "string"
            },
            "key" : {
              "type" : "string"
            }
          },
          "description" : "The list of credential operations."
        },
        "ResourceCredentialPropertiesBO" : {
          "required" : [ "orgId" ],
          "type" : "object",
          "properties" : {
            "orgId" : {
              "type" : "string"
            },
            "createdTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "updatedTime" : {
              "type" : "integer",
              "format" : "int64"
            },
            "changedBy" : {
              "type" : "string"
            },
            "createdBy" : {
              "type" : "string"
            },
            "id" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "value" : {
              "type" : "string"
            },
            "credentialDetailsId" : {
              "type" : "string"
            },
            "entityType" : {
              "type" : "string"
            },
            "key" : {
              "type" : "string"
            }
          },
          "description" : "The list of credential properties."
        },
        "ResourceType" : {
          "type" : "string",
          "enum" : [ "unknown", "application_domain", "ep_enum", "event", "schema", "application", "event_archive", "schema_archive", "application_archive", "tag", "virtual_broker", "topic_value_set", "api_products", "application_domain_sample", "modeled_event_mesh", "address_space", "topic_domain", "event_api", "event_api_product", "application_registration", "custom_attribute", "apim_event_api_product", "schema_registry", "event_broker_service", "event_broker_service_connection_endpoint", "event_broker_infrastructure" ]
        },
        "ResponseAuditResultStatsDTO" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/AuditResultStatsDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ResponseJobDTO" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/JobDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ResponseOrgDTO" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/OrgDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ResponseRuntimeImportAllResponseDTO" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/RuntimeImportAllResponseDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "RuntimeAgentFrontEndDTO" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "sdagkjlh32x"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the EMA.",
              "example" : "primary event management agent"
            },
            "region" : {
              "type" : "string",
              "description" : "The region in which the EMA belongs to, extracted from the EventManagementAgentRegion.",
              "readOnly" : true,
              "example" : "North America"
            },
            "clientUsername" : {
              "type" : "string",
              "description" : "The SMF username for a customer's EMA to use to communicate to event-portal.",
              "readOnly" : true,
              "example" : "sadhkjl2325sak"
            },
            "clientPassword" : {
              "type" : "string",
              "description" : "The SMF password for a customer's EMA to use to communicate to event-portal.",
              "readOnly" : true,
              "example" : "SomePassword"
            },
            "referencedByMessagingServiceIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "description" : "The list of messagingServiceIds user provides in GET APIs to filter the results.",
                "readOnly" : true,
                "example" : "[\"1kjdsf32\",\"9875ksdf\"]"
              }
            },
            "orgId" : {
              "type" : "string",
              "description" : "Used by admin APIs to get a list of EMAs against the given orgId",
              "readOnly" : true,
              "example" : "897xd32"
            },
            "status" : {
              "type" : "string",
              "description" : "The connection status of EP to the actual EMA which this object represents.",
              "readOnly" : true,
              "example" : "Connected"
            },
            "lastConnectedTime" : {
              "type" : "string",
              "description" : "The timestamp of last heartbeat received from the EMA",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "version" : {
              "type" : "string",
              "description" : "The version of the current connected EMA",
              "readOnly" : true,
              "example" : "1.1.2"
            },
            "runtimeAgentMode" : {
              "type" : "string",
              "description" : "The mode in which the EMA operates.",
              "readOnly" : true,
              "example" : "Scan With Event Portal",
              "enum" : [ "scanWithEventPortal", "uploadScanFile" ]
            },
            "updateRequired" : {
              "type" : "boolean",
              "description" : "Does this EMA require upgrade to latest released version.",
              "readOnly" : true,
              "example" : true
            },
            "messagingServicesToUpdate" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "messagingServicesToCreate" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/MessagingService"
              }
            },
            "messagingServicesToDisassociate" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            },
            "eventManagementAgentRegionId" : {
              "type" : "string",
              "description" : "The ID of the associated EventManagementAgentRegion.",
              "example" : "sdfkjh3242ds"
            }
          }
        },
        "RuntimeAgentOperationDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "runtimeAgentId" : {
              "type" : "string"
            },
            "messagingServiceId" : {
              "type" : "string"
            },
            "scanType" : {
              "type" : "string"
            },
            "entityTypes" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "RuntimeAgentOperationResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/RuntimeAgentOperationDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "RuntimeAgentRegionInternalDTO" : {
          "required" : [ "clientPassword", "clientUsername", "cloudProvider", "host", "msgVpn", "name", "region", "sempPassword", "sempUsername", "serviceId" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "serviceId" : {
              "type" : "string",
              "description" : "The id of the service from maas-core.",
              "example" : "67890x23vh"
            },
            "name" : {
              "type" : "string",
              "description" : "The name of the EventManagementAgentRegion.",
              "example" : "primary region"
            },
            "cloudProvider" : {
              "type" : "string",
              "description" : "The name of the cloud provider.",
              "example" : "AWS"
            },
            "region" : {
              "type" : "string",
              "description" : "The name of the region.",
              "example" : "us-east"
            },
            "host" : {
              "type" : "string",
              "description" : "The host name of the region.",
              "example" : "mr-connection-sdtwexd.messaging.solace.cloud"
            },
            "msgVpn" : {
              "type" : "string",
              "description" : "The name of the region's msgVpn.",
              "example" : "fooivmr1"
            },
            "port" : {
              "type" : "integer",
              "description" : "The SMF port number.",
              "format" : "int32",
              "example" : 55443
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "updatedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "sempPort" : {
              "type" : "integer",
              "format" : "int32"
            },
            "clientUsername" : {
              "type" : "string"
            },
            "clientPassword" : {
              "type" : "string"
            },
            "sempUsername" : {
              "type" : "string"
            },
            "sempPassword" : {
              "type" : "string"
            },
            "clientProfileName" : {
              "type" : "string"
            }
          }
        },
        "RuntimeAgentRegionInternalResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/RuntimeAgentRegionInternalDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "RuntimeAgentRegionInternalsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/RuntimeAgentRegionInternalDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "RuntimeEntityConfiguration" : {
          "type" : "object",
          "properties" : {
            "runtimeEntityType" : {
              "type" : "string",
              "enum" : [ "solaceQueue" ]
            },
            "configuration" : {
              "type" : "string"
            }
          }
        },
        "RuntimeImportAllDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "properties" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "string"
              }
            },
            "auditImportAction" : {
              "type" : "string",
              "enum" : [ "updateExistingParent", "updateExistingVersion", "createNewParent", "createNewVersion", "addToExistingVersion" ]
            },
            "filters" : {
              "$ref" : "#/components/schemas/RuntimeImportFiltersDTO"
            },
            "aggregationStrategy" : {
              "type" : "string",
              "enum" : [ "ALL_AUDIT_RESULTS_TO_ONE_PARENT", "ONE_AUDIT_RESULT_PER_PARENT", "AUDIT_RESULTS_GROUPED_BY_PARENT" ]
            },
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "RuntimeImportAllResponseDTO" : {
          "type" : "object",
          "properties" : {
            "jobURIs" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "RuntimeImportFiltersDTO" : {
          "type" : "object",
          "properties" : {
            "auditStatus" : {
              "type" : "string",
              "enum" : [ "designerOnly", "match", "partialMatch", "runtimeOnly" ]
            },
            "nameContains" : {
              "type" : "string"
            },
            "eventBrokerId" : {
              "type" : "string"
            },
            "tags" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string",
                "enum" : [ "To Be Created", "To Be Deleted" ]
              }
            },
            "hidden" : {
              "type" : "boolean"
            },
            "eventMeshId" : {
              "type" : "string"
            },
            "auditEntityType" : {
              "type" : "string",
              "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
            },
            "excludedAuditIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "sort" : {
              "type" : "string"
            }
          }
        },
        "RuntimeImportPreviewDTO" : {
          "type" : "object",
          "properties" : {
            "auditIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "RuntimeMappingDTO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "messagingServiceId" : {
              "type" : "string"
            },
            "auditEntityType" : {
              "type" : "string",
              "enum" : [ "all", "kafkaConsumerGroup", "kafkaConsumerGroupAggregate", "kafkaTopic", "kafkaTopicAggregate", "schemaParent", "schemaVersion", "solaceQueue", "solaceQueueAggregate", "solaceTopic", "kafkaTopicSchemaVersion", "kafkaTopicSchemaParent" ]
            },
            "identifier" : {
              "type" : "string"
            },
            "attributes" : {
              "type" : "string"
            },
            "scanId" : {
              "type" : "string"
            }
          },
          "readOnly" : true
        },
        "SchemaImportPreviewDTO" : {
          "type" : "object",
          "properties" : {
            "createNewParent" : {
              "$ref" : "#/components/schemas/ImportActionPreviewResultDTO"
            },
            "updateExistingParent" : {
              "$ref" : "#/components/schemas/ImportActionPreviewResultDTO"
            },
            "additionalCreateNewParentAuditIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "additionalUpdateExistingParentAuditIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "SchemaImportPreviewResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/SchemaImportPreviewDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "SchemaObject" : {
          "required" : [ "applicationDomainId", "name", "schemaType" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "name" : {
              "maxLength" : 2048,
              "type" : "string",
              "example" : "My First Schema"
            },
            "shared" : {
              "type" : "boolean",
              "example" : false
            },
            "contentType" : {
              "maxLength" : 255,
              "type" : "string",
              "description" : "*Deprecation Date: 2022-04-30<br>Removal Date: 2023-04-30<br>Reason: Content types are a runtime concept and don’t provide useful value in their current implementation.*<br>",
              "example" : "json",
              "deprecated" : true
            },
            "schemaType" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "example" : "jsonSchema"
            },
            "numberOfVersions" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventVersionRefCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "SchemaRegistriesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaRegistry"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "SchemaRegistry" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "schemaRegistryType" : {
              "maxLength" : 255,
              "minLength" : 1,
              "type" : "string",
              "description" : "The type of the Schema Registry.",
              "enum" : [ "confluent" ]
            },
            "brokerType" : {
              "type" : "string",
              "description" : "The type of the broker used in the event mesh.",
              "enum" : [ "kafka" ]
            },
            "messagingServiceIds" : {
              "type" : "array",
              "items" : {
                "type" : "string",
                "description" : "The messagingServiceIds associated with the Schema Registry",
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "connections" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/resourceConnectionDetails"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, schemaRegistry.",
              "readOnly" : true
            }
          }
        },
        "SchemaRegistryResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/SchemaRegistry"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "SchemaResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/SchemaObject"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "SchemaVersion" : {
          "required" : [ "schemaId", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "schemaId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "description" : {
              "maxLength" : 10000,
              "minLength" : 0,
              "type" : "string",
              "example" : "Schema created by Solace PubSub+ Cloud API documentation"
            },
            "version" : {
              "pattern" : "^\\d+\\.\\d+\\.\\d+$",
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "minLength" : 0,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "content" : {
              "type" : "string",
              "example" : "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An example schema\", \"required\": [ \"attribute\", ], \"properties\": { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\", \"title\": \"An example of a string based attribute\", \"examples\": [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
            },
            "referencedByEventVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "referencedBySchemaVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "schemaVersionReferences" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaVersionReferenceDTO"
              }
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "SchemaVersionFrontEnd" : {
          "required" : [ "schemaId", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "schemaId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "description" : {
              "maxLength" : 10000,
              "minLength" : 0,
              "type" : "string",
              "example" : "Schema created by Solace PubSub+ Cloud API documentation"
            },
            "version" : {
              "pattern" : "^\\d+\\.\\d+\\.\\d+$",
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "minLength" : 0,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "content" : {
              "type" : "string",
              "example" : "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An example schema\", \"required\": [ \"attribute\", ], \"properties\": { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\", \"title\": \"An example of a string based attribute\", \"examples\": [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
            },
            "referencedByEventVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "referencedBySchemaVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "schemaVersionReferences" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaVersionReferenceDTO"
              }
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "referencedByEventVersionIdsInEventMesh" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "parentName" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "SchemaVersionReferenceDTO" : {
          "type" : "object",
          "properties" : {
            "schemaVersionId" : {
              "type" : "string"
            }
          }
        },
        "SchemaVersionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/SchemaVersion"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "SchemaVersionsFrontEndResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaVersionFrontEnd"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "SchemaVersionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaVersion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "SchemasResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SchemaObject"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "SolaceClassOfServicePolicy" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "ID value of the object",
              "readOnly" : true,
              "example" : "123456"
            },
            "messageDeliveryMode" : {
              "type" : "string",
              "description" : "The mode that will be used for message delivery (ex: `guaranteed` uses a queue)",
              "enum" : [ "direct", "guaranteed" ],
              "default" : "direct"
            },
            "accessType" : {
              "type" : "string",
              "enum" : [ "exclusive", "non-exclusive" ]
            },
            "maximumTimeToLive" : {
              "type" : "integer",
              "description" : "Duration in seconds of how long a message can live in a queue",
              "format" : "int32",
              "example" : 1500
            },
            "queueType" : {
              "type" : "string",
              "description" : "The arrangement of queues on a broker used for message delivery (ex: `single` uses one queue per event API version in this event API product)",
              "enum" : [ "single", "combined" ],
              "default" : "combined"
            },
            "maxMsgSpoolUsage" : {
              "type" : "integer",
              "description" : "Total number of MBs available for the queue to use",
              "format" : "int32",
              "example" : 5
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true,
              "default" : "solaceClassOfServicePolicy"
            }
          },
          "description" : "Solace class of service policy"
        },
        "SolaceMessagingService" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "ID value of the object",
              "readOnly" : true,
              "example" : "123456"
            },
            "messagingServiceId" : {
              "type" : "string",
              "description" : "ID of the Event Portal messaging service",
              "readOnly" : true,
              "example" : "456789"
            },
            "messagingServiceName" : {
              "type" : "string",
              "description" : "Name of the Event Portal messaging service",
              "readOnly" : true,
              "example" : "Messaging Service"
            },
            "supportedProtocols" : {
              "type" : "array",
              "description" : "Values for allowed supported protocols",
              "items" : {
                "type" : "string",
                "description" : "Values for allowed supported protocols"
              }
            },
            "environmentId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "environmentName" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "Production"
            },
            "eventMeshId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2y"
            },
            "eventMeshName" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "US East Mesh"
            },
            "solaceCloudMessagingServiceId" : {
              "type" : "string",
              "example" : "service123"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true,
              "default" : "solaceManagedMessagingService"
            }
          },
          "description" : "Solace Messaging Services"
        },
        "SolaceQueueAggregateResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/SolaceQueueAuditResultSetDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "SolaceQueueAuditResultSetDTO" : {
          "type" : "object",
          "properties" : {
            "aggregateAuditResult" : {
              "$ref" : "#/components/schemas/Audit"
            },
            "solaceQueueAuditResults" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Audit"
              }
            },
            "id" : {
              "type" : "string",
              "readOnly" : true
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "SolaceQueueAuditResultSetsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/SolaceQueueAuditResultSetDTO"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "StateChangeRequestResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/VersionedObjectStateChangeRequest"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "StateDTO" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "stateOrder" : {
              "type" : "integer",
              "format" : "int32"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "StatesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/StateDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "StitchedEventVersionIdResultDTO" : {
          "type" : "object",
          "properties" : {
            "eventVersionId" : {
              "type" : "string"
            },
            "eventMeshIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "Subscription" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "readOnly" : true
            },
            "subscriptionType" : {
              "type" : "string",
              "example" : "topic"
            },
            "value" : {
              "type" : "string",
              "example" : "solace/cloud"
            },
            "attractedEventVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "$ref" : "#/components/schemas/AttractedEventVersionTuple"
              }
            }
          }
        },
        "SubscriptionStitchingEvalRequestDTO" : {
          "required" : [ "brokerType" ],
          "type" : "object",
          "properties" : {
            "brokerType" : {
              "type" : "string"
            },
            "subscriptions" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Subscription"
              }
            }
          }
        },
        "SuggestedAddressLevelDTO" : {
          "required" : [ "addressLevelType", "name" ],
          "type" : "object",
          "properties" : {
            "name" : {
              "type" : "string",
              "example" : "root"
            },
            "addressLevelType" : {
              "type" : "string",
              "enum" : [ "literal", "variable" ]
            },
            "enumVersionId" : {
              "type" : "string"
            },
            "enumVersion" : {
              "$ref" : "#/components/schemas/TopicAddressEnumVersion"
            }
          }
        },
        "SuggestionApiInputDTO" : {
          "required" : [ "addressLevels" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "addressLevels" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AddressLevel"
              }
            },
            "brokerType" : {
              "type" : "string"
            },
            "addressType" : {
              "type" : "string",
              "enum" : [ "topic" ]
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "Tag" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "123456"
            },
            "name" : {
              "maxLength" : 60,
              "minLength" : 0,
              "type" : "string",
              "readOnly" : true,
              "example" : "create"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, tag.",
              "readOnly" : true
            }
          },
          "example" : [ "To Be Created" ]
        },
        "TagAssociationsObject" : {
          "required" : [ "tags" ],
          "type" : "object",
          "properties" : {
            "tags" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TagEntityAssociationsObject"
              }
            }
          }
        },
        "TagEntityAssociationsObject" : {
          "required" : [ "entityType", "tagId" ],
          "type" : "object",
          "properties" : {
            "tagId" : {
              "type" : "string"
            },
            "entityType" : {
              "type" : "string"
            },
            "entitiesToAssociate" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "entitiesToDisassociate" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        },
        "TagResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/Tag"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TargetEntitiesRequestDTO" : {
          "type" : "object",
          "properties" : {
            "selectedEntityIds" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "entityType" : {
              "type" : "string",
              "enum" : [ "application", "schema", "event" ]
            }
          }
        },
        "ToggleInfoDTO" : {
          "required" : [ "id" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "defaultValue" : {
              "type" : "boolean"
            }
          }
        },
        "ToggleOrgInfoDTO" : {
          "required" : [ "id" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            }
          }
        },
        "ToggleOrgInfoListResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ToggleOrgInfoDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ToggleOverrideDTO" : {
          "required" : [ "id" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            },
            "orgId" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            }
          }
        },
        "ToggleOverrideListResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ToggleOverrideDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "ToggleStatusDTO" : {
          "required" : [ "enabled", "id" ],
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string"
            },
            "enabled" : {
              "type" : "boolean"
            }
          }
        },
        "ToggleStatusListResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ToggleStatusDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TogglesInfoResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ToggleInfoDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicAddressEnum" : {
          "required" : [ "applicationDomainId", "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "12345678"
            },
            "name" : {
              "maxLength" : 60,
              "type" : "string",
              "example" : "My First Enum"
            },
            "shared" : {
              "type" : "boolean",
              "example" : false
            },
            "numberOfVersions" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "eventVersionRefCount" : {
              "type" : "integer",
              "format" : "int32",
              "readOnly" : true
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "TopicAddressEnumResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/TopicAddressEnum"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicAddressEnumValue" : {
          "required" : [ "value" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "enumVersionId" : {
              "type" : "string",
              "example" : "xyz23mwec2g"
            },
            "value" : {
              "maxLength" : 255,
              "type" : "string",
              "example" : "Ontario"
            },
            "label" : {
              "maxLength" : 40,
              "minLength" : 0,
              "type" : "string",
              "example" : "Display name for the value"
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "TopicAddressEnumVersion" : {
          "required" : [ "enumId", "values", "version" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "xyz23mwec2g"
            },
            "enumId" : {
              "type" : "string",
              "example" : "xyz23mwec2g"
            },
            "description" : {
              "maxLength" : 10000,
              "minLength" : 0,
              "type" : "string",
              "example" : "Enum created by Solace PubSub+ Cloud API documentation"
            },
            "version" : {
              "type" : "string",
              "example" : "1.0.0"
            },
            "displayName" : {
              "maxLength" : 40,
              "minLength" : 0,
              "type" : "string",
              "example" : "Display name for the version"
            },
            "values" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnumValue"
              }
            },
            "referencedByEventVersionIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "referencedByTopicDomainIds" : {
              "type" : "array",
              "readOnly" : true,
              "items" : {
                "type" : "string",
                "readOnly" : true,
                "example" : "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
              }
            },
            "stateId" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "1"
            },
            "customAttributes" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/CustomAttribute"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true
            }
          }
        },
        "TopicAddressEnumVersionResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/TopicAddressEnumVersion"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicAddressEnumVersionsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnumVersion"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "TopicAddressEnumsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressEnum"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "TopicAddressResourceDTO" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string"
            },
            "applicationDomainId" : {
              "type" : "string"
            },
            "name" : {
              "type" : "string"
            },
            "resource" : {
              "type" : "string"
            },
            "description" : {
              "type" : "string"
            },
            "type" : {
              "type" : "string"
            }
          }
        },
        "TopicAddressResourceResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/TopicAddressResourceDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicAddressResourcesResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicAddressResourceDTO"
              }
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicAggregateImportPreviewDTO" : {
          "type" : "object",
          "properties" : {
            "createNewParent" : {
              "$ref" : "#/components/schemas/ImportActionPreviewResultDTO"
            },
            "updateExistingParent" : {
              "$ref" : "#/components/schemas/ImportActionPreviewResultDTO"
            },
            "referencedSchemaImportPreview" : {
              "$ref" : "#/components/schemas/SchemaImportPreviewDTO"
            }
          }
        },
        "TopicAggregateImportPreviewResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/TopicAggregateImportPreviewDTO"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicDomain" : {
          "required" : [ "addressLevels", "applicationDomainId", "brokerType" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "vck3mzyb2j5"
            },
            "applicationDomainId" : {
              "type" : "string",
              "example" : "acb2j5k3mly"
            },
            "brokerType" : {
              "type" : "string",
              "example" : "solace"
            },
            "addressLevels" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/AddressLevel"
              }
            },
            "type" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "topicDomain"
            }
          }
        },
        "TopicDomainAnalysisDTO" : {
          "type" : "object",
          "properties" : {
            "presentInOtherApplicationDomains" : {
              "type" : "boolean"
            },
            "otherApplicationDomainCount" : {
              "type" : "integer",
              "format" : "int32"
            },
            "otherEntitledApplicationDomains" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ApplicationDomain"
              }
            }
          }
        },
        "TopicDomainResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "$ref" : "#/components/schemas/TopicDomain"
            },
            "meta" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          }
        },
        "TopicDomainsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/TopicDomain"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        },
        "TopicFilter" : {
          "required" : [ "eventVersionIds" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "name" : {
              "type" : "string",
              "description" : "name of address node",
              "example" : "name"
            },
            "filterValue" : {
              "type" : "string",
              "description" : "Different filter values separated by comma",
              "example" : " Tes?, TEST*FILTER, SAmPle"
            },
            "eventVersionIds" : {
              "uniqueItems" : true,
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of payload",
              "readOnly" : true,
              "default" : "topicFilter"
            }
          },
          "description" : "List of variable that contains address node name and filters"
        },
        "VersionedObjectStateChangeRequest" : {
          "type" : "object",
          "properties" : {
            "stateId" : {
              "type" : "string",
              "example" : "1"
            }
          }
        },
        "meta" : {
          "type" : "object",
          "properties" : {
            "pagination" : {
              "$ref" : "#/components/schemas/Pagination"
            }
          }
        },
        "resourceAuthenticationDetails" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "protocol" : {
              "maxLength" : 60,
              "minLength" : 0,
              "type" : "string",
              "description" : "The authentication protocol.",
              "example" : "SEMP"
            },
            "protocolVersion" : {
              "maxLength" : 60,
              "minLength" : 0,
              "type" : "string",
              "description" : "The authentication protocol version.",
              "example" : "V2"
            },
            "connectionDetailsId" : {
              "type" : "string",
              "description" : "The connection Id that the authentication object is associated to.",
              "readOnly" : true,
              "example" : "h5mk26hkm2"
            },
            "properties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/resourceAuthenticationProperties"
              }
            },
            "credentials" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/resourceCredentialDetails"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, resourceAuthenticationDetails.",
              "readOnly" : true
            }
          },
          "description" : "The list of connection authentications."
        },
        "resourceAuthenticationProperties" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "name" : {
              "type" : "string",
              "description" : "The property name.",
              "example" : "AuthenticationMethod"
            },
            "value" : {
              "type" : "string",
              "description" : "The property value.",
              "example" : "oauth2.0"
            },
            "authenticationDetailsId" : {
              "type" : "string",
              "description" : "The authentication Id the property is associated to.",
              "readOnly" : true,
              "example" : "h5mk26hkm2"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, resourceAuthenticationProperties.",
              "readOnly" : true
            }
          },
          "description" : "The list of authentication properties."
        },
        "resourceConnectionDetails" : {
          "required" : [ "name" ],
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "resourceId" : {
              "type" : "string",
              "description" : "The id of the resource the connection object is associated to.",
              "readOnly" : true,
              "example" : "h5mk26hkm2"
            },
            "resourceType" : {
              "type" : "string",
              "description" : "The type of the resource the connection object is associated to.",
              "readOnly" : true,
              "enum" : [ "schema" ]
            },
            "name" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The name of the connection object.",
              "example" : "my https connection"
            },
            "url" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The url of the connection object.",
              "example" : "https://abcd.messaging.solace.cloud:943 OR http://localhost:8081"
            },
            "properties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/resourceConnectionProperties"
              }
            },
            "authentications" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/resourceAuthenticationDetails"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, resourceConnection.",
              "readOnly" : true
            }
          }
        },
        "resourceConnectionProperties" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "name" : {
              "type" : "string",
              "description" : "The property name.",
              "example" : "vpn"
            },
            "value" : {
              "type" : "string",
              "description" : "The property value.",
              "example" : "my-personal-vpn"
            },
            "connectionDetailsId" : {
              "type" : "string",
              "description" : "The connection Id the property is associated to.",
              "readOnly" : true,
              "example" : "h5mk26hkm2"
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, resourceConnectionProperties.",
              "readOnly" : true
            }
          },
          "description" : "The list of connection properties."
        },
        "resourceCredentialDetails" : {
          "type" : "object",
          "properties" : {
            "createdTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "updatedTime" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "2021-12-31T20:30:57.920Z"
            },
            "createdBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "changedBy" : {
              "type" : "string",
              "readOnly" : true,
              "example" : "12345678"
            },
            "id" : {
              "type" : "string",
              "description" : "Primary key set by the server.",
              "readOnly" : true,
              "example" : "12345"
            },
            "source" : {
              "maxLength" : 255,
              "minLength" : 0,
              "type" : "string",
              "description" : "The credential source.",
              "example" : "keyStore"
            },
            "authenticationDetailsId" : {
              "type" : "string",
              "description" : "The authentication Id the credential object is associated to.",
              "readOnly" : true,
              "example" : "h5mk26hkm2"
            },
            "properties" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ResourceCredentialPropertiesBO"
              }
            },
            "operations" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/ResourceCredentialOperationsBO"
              }
            },
            "type" : {
              "type" : "string",
              "description" : "The type of this payload, resourceCredentialDetails.",
              "readOnly" : true
            }
          },
          "description" : "The list of credential details."
        },
        "tagsResponse" : {
          "type" : "object",
          "properties" : {
            "data" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/components/schemas/Tag"
              }
            },
            "meta" : {
              "$ref" : "#/components/schemas/meta"
            }
          }
        }
      },
      "securitySchemes" : {
        "APIToken" : {
          "type" : "http",
          "scheme" : "bearer",
          "bearerFormat" : "JWT"
        }
      }
    }
  }