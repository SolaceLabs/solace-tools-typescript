{
    "openapi": "3.0.1",
    "info": {
        "title": "Event Portal - Runtime",
        "description": "REST API Concepts\n\nSolace PubSub+ Event Portal provides REST APIs that you can use to manage your data in PubSub+ Cloud. \nThe REST APIs allow you to model your event-driven architectures from your own client applications.\n\nThe following document describes the public REST APIs available for use in Event Portal 2.0. Objects created in this \nversion will not be available in Event Portal 1.0. APIs that display (Beta) in their summary are provided as-is and \nare subject to change or removal. They may not be of the quality expected for generally available APIs and have no \nguaranteed forward compatibility with the generally available version of the API.\n\n",
        "version": "2.0.27"
    },
    "servers": [
        {
            "url": "https://api.solace.cloud",
            "description": "Solace PubSub+ Cloud US EAST Region"
        },
        {
            "url": "https://api.solacecloud.com.au",
            "description": "Solace PubSub+ Cloud AUS Region"
        }
    ],
    "security": [
        {
            "APIToken": []
        }
    ],
    "tags": [
        {
            "name": "Audit Results"
        },
        {
            "name": "Environments"
        },
        {
            "name": "Event Management Agents"
        },
        {
            "name": "Event Meshes"
        },
        {
            "name": "Messaging Service Scan Data"
        },
        {
            "name": "Messaging Service Scan Logs"
        },
        {
            "name": "Messaging Service Scans"
        },
        {
            "name": "Messaging Services"
        }
    ],
    "paths": {
        "/api/v2/architecture/eventMeshes": {
            "get": {
                "tags": [
                    "Event Meshes"
                ],
                "summary": "Get a list of event meshes",
                "description": "Use this API to get a list of event meshes that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `modeled_event_mesh:get:*` ]",
                "operationId": "getEventMeshes",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of event meshes to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Name of the event mesh to match on.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "environmentId",
                        "in": "query",
                        "description": "Match only event meshes in the given environment",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of event meshes and the accompanying metadata.",
                        "content": {
                            "application/json;charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventMeshesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Meshes"
                ],
                "summary": "Create an event mesh",
                "description": "Create an event mesh.",
                "operationId": "createEventMesh",
                "requestBody": {
                    "description": "Event mesh.",
                    "content": {
                        "application/json;charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/EventMesh"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created an event mesh. The newly saved event mesh is returned in the response body.",
                        "content": {
                            "application/json;charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventMeshResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/environments": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "Get a list of environments",
                "description": "Use this API to get a list of all environments.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
                "operationId": "getEnvironments",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of environments to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "like",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get a list of environments and the accompanying metadata.",
                        "content": {
                            "application/json;charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/auditResults": {
            "get": {
                "tags": [
                    "Audit Results"
                ],
                "summary": "Get a list of audit results",
                "description": "This provides a list of audit results for the given event mesh and/or event brokers.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `audit:read` ]",
                "operationId": "listAuditResults",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of audit records to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "eventBrokerIds",
                        "in": "query",
                        "description": "Match only audit records belonging to the given event brokers.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "eventMeshId",
                        "in": "query",
                        "description": "Match only audit records belonging to the given event mesh.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "auditEntityTypes",
                        "in": "query",
                        "description": "Match only audit records belonging to the given entity types.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "all",
                                    "kafkaConsumerGroup",
                                    "kafkaConsumerGroupAggregate",
                                    "kafkaTopic",
                                    "kafkaTopicAggregate",
                                    "schemaParent",
                                    "schemaVersion",
                                    "solaceQueue",
                                    "solaceQueueAggregate",
                                    "solaceTopic",
                                    "kafkaTopicSchemaVersion",
                                    "kafkaTopicSchemaParent"
                                ]
                            }
                        }
                    },
                    {
                        "name": "statuses",
                        "in": "query",
                        "description": "Match only audit records with the given statuses.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "designerOnly",
                                    "match",
                                    "partialMatch",
                                    "runtimeOnly"
                                ]
                            }
                        }
                    },
                    {
                        "name": "startsWith",
                        "in": "query",
                        "description": "Match only audit records with identifiers starting with the given value.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "contains",
                        "in": "query",
                        "description": "Match audit records with identifiers containing the given value.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending. Sorting is supported for status and identifier.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of audit records and the accompanying metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditResultsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/eventMeshes/{id}": {
            "get": {
                "tags": [
                    "Event Meshes"
                ],
                "summary": "Get an event mesh",
                "description": "Get a single event mesh by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `modeled_event_mesh:get:{id}` ]",
                "operationId": "getEventMesh",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the event mesh.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The event mesh.",
                        "content": {
                            "application/json;charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventMeshResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Event Meshes"
                ],
                "summary": "Delete an event mesh",
                "description": "Use this API to delete an event mesh.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `modeled_event_mesh:delete:*` ]",
                "operationId": "deleteEventMesh",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the event mesh.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content is returned."
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Event Meshes"
                ],
                "summary": "Update an event mesh",
                "description": "Use this API to update an event mesh. You only need to specify the fields that need to be updated.",
                "operationId": "updateEventMesh",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the event mesh to update.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The event mesh.",
                    "content": {
                        "application/json;charset=UTF-8": {
                            "schema": {
                                "$ref": "#/components/schemas/EventMesh"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The updated event mesh.",
                        "content": {
                            "application/json;charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventMeshResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServices": {
            "get": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Get a list of messaging services",
                "description": "Use this API to get a list of messaging services that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:read` ]",
                "operationId": "getMessagingServices",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of messaging services to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "The IDs of the messaging services.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "messagingServiceType",
                        "in": "query",
                        "description": "Match only messaging services of the given type, options are: solace, kafka.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "runtimeAgentId",
                        "in": "query",
                        "description": "Match only messaging services in the given runtimeAgentId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventMeshId",
                        "in": "query",
                        "description": "Match only messaging services in the given eventMeshId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventManagementAgentId",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of messaging services and the accompanying metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServicesResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Create a messaging service",
                "description": "Use this API to create a messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
                "operationId": "createMessagingService",
                "requestBody": {
                    "description": "The messaging service.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagingService"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created a messaging service. The newly saved messaging service is returned in the response body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/environments/{id}": {
            "get": {
                "tags": [
                    "Environments"
                ],
                "summary": "Get an environment",
                "description": "Use this API to get a single environment by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_designer:access` ]",
                "operationId": "getEnvironment",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the environment.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The environment.",
                        "content": {
                            "application/json;charset=UTF-8": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnvironmentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/eventManagementAgents": {
            "get": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Get a list of EMAs",
                "description": "Use this API to get a list of EMAs that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
                "operationId": "getEventManagementAgents",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of EMAs to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "The IDs of the EMAs.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "createdBy",
                        "in": "query",
                        "description": "Match only EMAs created by this user",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventManagementAgentRegionId",
                        "in": "query",
                        "description": "Match only EMAs in the given EMA-Region",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds.\n<br>Replacement: Use expand instead.\n<br>Reason: The change is to align with the API specification design.\n<br>Removal Date: 2024-11-03 18:00:00.000.\n",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of EMAs and the accompanying metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventManagementAgentsResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Create an EMA object",
                "description": "Use this API to create an EMA object.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:write` ]",
                "operationId": "createEventManagementAgent",
                "requestBody": {
                    "description": "The EMA object.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventManagementAgent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Created an EMA. The newly saved EMA object is returned in the response body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventManagementAgentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServiceScans": {
            "get": {
                "tags": [
                    "Messaging Service Scans"
                ],
                "summary": "Get a list of messaging service scans",
                "description": "Use this API to get a list of messaging service scans that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
                "operationId": "getMessagingServiceScans",
                "parameters": [
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of messaging service scans to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "The IDs of the messaging service scans.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "messagingServiceId",
                        "in": "query",
                        "description": "Match only messaging service scans in the given messagingService",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "eventMeshId",
                        "in": "query",
                        "description": "Match only messaging service scans in the given eventMeshId",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of messaging service scans and the accompanying metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceScansResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServices/{id}": {
            "get": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Get a messaging service",
                "description": "Use this API to get a single messaging service by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:read` ]",
                "operationId": "getMessagingService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The messaging service.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Delete a messaging service",
                "description": "Use this API to delete a messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
                "operationId": "deleteMessagingService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content is returned."
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Update a messaging service",
                "description": "Use this API to update a messaging service. You only need to specify the fields that need to be updated. However, if you want to update anything under subObjects (i.e. anything inside messagingServiceConnections object), you need to provide the original messagingServiceConnections with the updated fields instead of just providing the changed fields.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
                "operationId": "updateMessagingService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service to update.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The messaging service.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagingService"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The updated messaging service.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/eventManagementAgents/{id}": {
            "get": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Get an EMA object",
                "description": "Use this API to get a single EMA by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
                "operationId": "getEventManagementAgent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the EMA object.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds.\n<br>Replacement: Use expand instead.\n<br>Reason: The change is to align with the API specification design.\n<br>Removal Date: 2024-11-03 18:00:00.000.\n",
                        "required": false,
                        "deprecated": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "expand",
                        "in": "query",
                        "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The EMA object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventManagementAgentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Delete an EMA object",
                "description": "Use this API to delete an EMA.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:write` ]",
                "operationId": "deleteEventManagementAgent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the EMA object.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content is returned."
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Update an EMA object",
                "description": "Use this API to update an EMA. You only need to specify the fields that need to be updated.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:write` ]",
                "operationId": "updateEventManagementAgent",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the EMA object to update.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The EMA object.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventManagementAgent"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The updated EMA object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EventManagementAgentResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServiceScans/{id}": {
            "get": {
                "tags": [
                    "Messaging Service Scans"
                ],
                "summary": "Get a messaging service scan",
                "description": "Use this API to get a single messaging service scan by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
                "operationId": "getMessagingServiceScan",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service scan.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The messaging service scan.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceScanResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Messaging Service Scans"
                ],
                "summary": "Delete a messaging service scan",
                "description": "Use this API to delete a messaging service scan.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:write` ]",
                "operationId": "deleteMessagingServiceScan",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service scan.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content is returned."
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/auditResults/{auditResultId}": {
            "get": {
                "tags": [
                    "Audit Results"
                ],
                "summary": "Get the details of a single audit result",
                "description": "This provides the details of a single audit result, given its id.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `audit:read` ]",
                "operationId": "getAuditResultDetail",
                "parameters": [
                    {
                        "name": "auditResultId",
                        "in": "path",
                        "description": "The ID of the audit.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The audit detail.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuditResultDetailResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServiceScans/{scanId}/logs": {
            "get": {
                "tags": [
                    "Messaging Service Scan Logs"
                ],
                "summary": "Get a list of messaging service scan logs",
                "description": "Use this API to get a list of messaging service scan logs that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
                "operationId": "getMessagingServiceScansLogs",
                "parameters": [
                    {
                        "name": "scanId",
                        "in": "path",
                        "description": "The ID of the messaging service scan we want logs for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of messaging service scan logs to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Sort based on the provided parameters. <br> The value can be either a standalone field name (`?sort=<field>`) or a field and direction, delimited by a colon (`?sort=<field>:<asc|desc>`). If the direction is not specified, the default is ascending.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of messaging service scan logs and the accompanying metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceScanLogListResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServices/{id}/removeAssociation": {
            "put": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Remove an association between an messaging service and the requested entity",
                "description": "Use this API to remove the association between a messaging service and either of EVENT_MESH or EVENT_MANAGEMENT_AGENT.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
                "operationId": "removeAssociationMessagingService",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The association object with the value matching either EVENT_MESH or EVENT_MANAGEMENT_AGENT.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagingServiceRemoveAssociation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The updated messaging service, e.g. if the API request body had \"association\": \"EVENT_MESH\" then the resulting object would not have eventMeshId attribute.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/eventManagementAgents/{id}/configuration/raw": {
            "get": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Get the raw configs in string format for an EMA object",
                "description": "Use this API to get the raw configs for a single EMA by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
                "operationId": "getEventManagementAgentConfigRaw",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the EMA object.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configFileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "connected",
                                "standalone"
                            ],
                            "default": "connected"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The EMA config in yaml structure.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection": {
            "get": {
                "tags": [
                    "Messaging Service Scan Data"
                ],
                "summary": "Get a list of messaging service scan data",
                "description": "Use this API to get a list of messaging service scan data that match the given parameters.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
                "operationId": "getMessagingServiceScansData",
                "parameters": [
                    {
                        "name": "scanId",
                        "in": "path",
                        "description": "The ID of the messaging service scan we want data for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of messaging service scan data to get per page.",
                        "required": false,
                        "schema": {
                            "maximum": 100,
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 20
                        }
                    },
                    {
                        "name": "pageNumber",
                        "in": "query",
                        "description": "The page number to get.",
                        "required": false,
                        "schema": {
                            "minimum": 1,
                            "type": "integer",
                            "format": "int32",
                            "default": 1
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The name of the field to sort on.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "ids",
                        "in": "query",
                        "description": "The IDs of the messaging service scan data.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "collectionTypes",
                        "in": "query",
                        "description": "Match only scan data whose dataCollectionType matches the given list.",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "brokerConfiguration",
                                    "clusterConfiguration",
                                    "consumerGroups",
                                    "consumerGroupConfiguration",
                                    "overrideTopicConfiguration",
                                    "queueConfiguration",
                                    "queueListing",
                                    "schema",
                                    "subscriptionConfiguration",
                                    "topicConfiguration",
                                    "topicListing"
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The list of messaging service scan data and the accompanying metadata.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceScanDataListResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/eventManagementAgents/{id}/configuration/file": {
            "get": {
                "tags": [
                    "Event Management Agents"
                ],
                "summary": "Get the raw configs in file format for an EMA object",
                "description": "Use this API to get the raw configs for a single EMA by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_management_agent:read` ]",
                "operationId": "getEventManagementAgentConfigFile",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the EMA object.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "configFileType",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "connected",
                                "standalone"
                            ],
                            "default": "connected"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The EMA config in a yaml file named application.yml.",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServices/{messagingServiceId}/scanStart": {
            "put": {
                "tags": [
                    "Messaging Services"
                ],
                "summary": "Initiate a scan request to run against a messaging service",
                "description": "Use this API to make a scan request on a messaging service.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service:write` ]",
                "operationId": "scanStartMessagingService",
                "parameters": [
                    {
                        "name": "messagingServiceId",
                        "in": "path",
                        "description": "The ID of the messaging service.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The messaging service.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagingServiceOperation"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Requested a scan on the messaging service. The operation object with ID set as ID of the created scan Object is returned in the response body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceOperationResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection/{id}": {
            "get": {
                "tags": [
                    "Messaging Service Scan Data"
                ],
                "summary": "Get a messaging service scan data",
                "description": "Use this API to get a single messaging service scan data by its ID.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `messaging_service_scan:read` ]",
                "operationId": "getMessagingServiceScanData",
                "parameters": [
                    {
                        "name": "scanId",
                        "in": "path",
                        "description": "The ID of the messaging service scan.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the messaging service scan data.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The messaging service scan data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MessagingServiceScanDataResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            },
                            "*/*": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/ErrorResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/InvalidStateReference"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "405": {
                        "description": "Method Not Allowed.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "Not Implemented.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "504": {
                        "description": "Gateway Timeout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ApplicationConfigPushJobResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApplicationConfigurationPushJob"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "ApplicationConfigurationPushJob": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "eventBrokerId": {
                        "type": "string"
                    },
                    "applicationId": {
                        "type": "string"
                    },
                    "runtimeEntityConfigurations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/RuntimeEntityConfiguration"
                        }
                    },
                    "sourceType": {
                        "type": "string",
                        "enum": [
                            "changeRecord"
                        ]
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "requestMetadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "in_progress",
                            "error",
                            "validation_error",
                            "success"
                        ]
                    },
                    "createdTime": {
                        "type": "string"
                    },
                    "errorDescription": {
                        "type": "string"
                    },
                    "updatedTime": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "isRemoval": {
                        "type": "boolean"
                    }
                }
            },
            "Audit": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "messagingServiceId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "auditEntityType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "solaceQueue"
                    },
                    "messagingServiceName": {
                        "type": "string",
                        "readOnly": true,
                        "example": "My Solace Service"
                    },
                    "identifier": {
                        "type": "string",
                        "readOnly": true,
                        "example": "orderEventQueue"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "example": "partialMatch"
                    },
                    "designerMappingId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "designerMappingAssociationId": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "11ee1ffe-dca0-20e5-a648-d900f0610a2a"
                    },
                    "runtimeMappingId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "runtimeMappingAssociationId": {
                        "type": "string",
                        "format": "uuid",
                        "readOnly": true,
                        "example": "11ee1ffe-dca0-20e5-a648-d900f0610a2a"
                    },
                    "designerMapping": {
                        "$ref": "#/components/schemas/DesignerMappingDTO"
                    },
                    "runtimeMapping": {
                        "$ref": "#/components/schemas/RuntimeMappingDTO"
                    },
                    "associatedTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "schemaType": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AuditCommandDTO": {
                "type": "object",
                "properties": {
                    "auditOperationType": {
                        "type": "string",
                        "enum": [
                            "aggregateAudit",
                            "audit",
                            "deleteAll",
                            "designerMapping",
                            "designerUpdate",
                            "runtimeMapping",
                            "runtimeUpdate",
                            "scan",
                            "updateRelationships"
                        ]
                    },
                    "auditEntityType": {
                        "type": "string",
                        "enum": [
                            "all",
                            "kafkaConsumerGroup",
                            "kafkaConsumerGroupAggregate",
                            "kafkaTopic",
                            "kafkaTopicAggregate",
                            "schemaParent",
                            "schemaVersion",
                            "solaceQueue",
                            "solaceQueueAggregate",
                            "solaceTopic",
                            "kafkaTopicSchemaVersion",
                            "kafkaTopicSchemaParent"
                        ]
                    },
                    "sourceId": {
                        "type": "string"
                    },
                    "synchronous": {
                        "type": "boolean"
                    },
                    "productionModeErrorHandling": {
                        "type": "boolean"
                    }
                }
            },
            "AuditDetail": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "runtimeAttributes": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "designerAttributes": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "versionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "entityId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "parentId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "scanId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "example": "partialMatch"
                    },
                    "identifier": {
                        "type": "string",
                        "readOnly": true,
                        "example": "orderEventQueue"
                    },
                    "relations": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AuditRelationDTO"
                        }
                    },
                    "extendedAttributes": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "associatedTags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tag"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AuditDetailResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AuditDetail"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "AuditJob": {
                "required": [
                    "auditEntityType",
                    "auditOperationType",
                    "contextId",
                    "contextType",
                    "state"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "state": {
                        "type": "string",
                        "enum": [
                            "completed",
                            "failed",
                            "started"
                        ]
                    },
                    "scanId": {
                        "type": "string"
                    },
                    "contextId": {
                        "type": "string"
                    },
                    "contextType": {
                        "type": "string"
                    },
                    "auditEntityType": {
                        "type": "string",
                        "enum": [
                            "all",
                            "kafkaConsumerGroup",
                            "kafkaConsumerGroupAggregate",
                            "kafkaTopic",
                            "kafkaTopicAggregate",
                            "schemaParent",
                            "schemaVersion",
                            "solaceQueue",
                            "solaceQueueAggregate",
                            "solaceTopic",
                            "kafkaTopicSchemaVersion",
                            "kafkaTopicSchemaParent"
                        ]
                    },
                    "auditOperationType": {
                        "type": "string",
                        "enum": [
                            "aggregateAudit",
                            "audit",
                            "deleteAll",
                            "designerMapping",
                            "designerUpdate",
                            "runtimeMapping",
                            "runtimeUpdate",
                            "scan",
                            "updateRelationships"
                        ]
                    },
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AuditJobResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditJob"
                        }
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "AuditRelationDTO": {
                "type": "object",
                "properties": {
                    "auditEntityType": {
                        "type": "string"
                    },
                    "auditId": {
                        "type": "string"
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "readOnly": true
            },
            "AuditResult": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "eventBrokerId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "auditEntityType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "solaceQueue"
                    },
                    "eventBrokerName": {
                        "type": "string",
                        "readOnly": true,
                        "example": "My Solace Service"
                    },
                    "identifier": {
                        "type": "string",
                        "readOnly": true,
                        "example": "orderEventQueue"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "example": "partialMatch"
                    },
                    "schemaType": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AuditResultDetail": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "parentId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "versionId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "entityId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "scanId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "status": {
                        "type": "string",
                        "readOnly": true,
                        "example": "partialMatch"
                    },
                    "identifier": {
                        "type": "string",
                        "readOnly": true,
                        "example": "orderEventQueue"
                    },
                    "relations": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "$ref": "#/components/schemas/AuditRelationDTO"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "AuditResultDetailResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/AuditResultDetail"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "AuditResultsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AuditResult"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "AuditsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Audit"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "DesignerMappingDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "messagingServiceId": {
                        "type": "string"
                    },
                    "auditEntityType": {
                        "type": "string",
                        "enum": [
                            "all",
                            "kafkaConsumerGroup",
                            "kafkaConsumerGroupAggregate",
                            "kafkaTopic",
                            "kafkaTopicAggregate",
                            "schemaParent",
                            "schemaVersion",
                            "solaceQueue",
                            "solaceQueueAggregate",
                            "solaceTopic",
                            "kafkaTopicSchemaVersion",
                            "kafkaTopicSchemaParent"
                        ]
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "attributes": {
                        "type": "string"
                    },
                    "entityId": {
                        "type": "string"
                    },
                    "versionId": {
                        "type": "string"
                    },
                    "parentId": {
                        "type": "string"
                    }
                },
                "readOnly": true
            },
            "Environment": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "xyz123abc"
                    },
                    "name": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Staging environment"
                    },
                    "description": {
                        "type": "string",
                        "readOnly": true,
                        "example": "The description of my environment"
                    },
                    "revision": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "numberOfEventMeshes": {
                        "type": "integer",
                        "format": "int32",
                        "readOnly": true
                    },
                    "configPush": {
                        "type": "string",
                        "enum": [
                            "auto",
                            "disabled"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "EnvironmentResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Environment"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "EnvironmentsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Environment"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "An error occurred"
                    },
                    "errorId": {
                        "type": "string",
                        "example": "123e4567-e89b-12d3-a456-426655440000"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "example": "'object': { 'field': 'description' }"
                        },
                        "example": "'object': { 'field': 'description' }"
                    },
                    "validationDetails": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "example": "'name': ['Not unique']",
                            "items": {
                                "type": "string",
                                "example": "'name': ['Not unique']"
                            }
                        },
                        "example": "'name': ['Not unique']"
                    },
                    "errorType": {
                        "type": "string",
                        "writeOnly": true
                    }
                },
                "discriminator": {
                    "propertyName": "errorType"
                }
            },
            "EventBrokerDataCollectionUploadResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EventBrokerScanDataUploadDetails"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "EventBrokerScanData": {
                "required": [
                    "data"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "p92u412l8xw"
                    },
                    "eventBrokerId": {
                        "type": "string",
                        "readOnly": true,
                        "example": "acb2j5k3mly"
                    },
                    "data": {
                        "$ref": "#/components/schemas/JsonNode"
                    },
                    "scanTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "KAFKA_ALL",
                                "KAFKA_BROKER_CONFIGURATION",
                                "KAFKA_CLUSTER_CONFIGURATION",
                                "KAFKA_CONSUMER_GROUPS",
                                "KAFKA_CONSUMER_GROUPS_CONFIGURATION",
                                "KAFKA_FEATURES",
                                "KAFKA_PRODUCERS",
                                "KAFKA_TOPIC_CONFIGURATION",
                                "KAFKA_TOPIC_CONFIGURATION_FULL",
                                "KAFKA_TOPIC_LISTING",
                                "KAFKA_TOPIC_OVERRIDE_CONFIGURATION",
                                "CONFLUENT_SCHEMA_REGISTRY_SCHEMA",
                                "SOLACE_ALL",
                                "SOLACE_QUEUE_CONFIG",
                                "SOLACE_QUEUE_LISTING",
                                "SOLACE_SUBSCRIPTION_CONFIG"
                            ]
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, ema data collection.",
                        "readOnly": true
                    }
                }
            },
            "EventBrokerScanDataUploadDetails": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "p92u412l8xw"
                    },
                    "scanId": {
                        "type": "string",
                        "description": "The ID of the uploaded scan request.",
                        "readOnly": true,
                        "example": "p92u412l8xw"
                    },
                    "eventBrokerId": {
                        "type": "string",
                        "description": "The event broker id of the data collection upload request.",
                        "readOnly": true,
                        "example": "acb2j5k3mly"
                    },
                    "eventBrokerType": {
                        "type": "string",
                        "readOnly": true,
                        "example": "Kafka",
                        "enum": [
                            "solace",
                            "kafka"
                        ]
                    },
                    "dataCollectionTypes": {
                        "type": "array",
                        "description": "The uploaded data collection types.",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The uploaded data collection types.",
                            "readOnly": true,
                            "enum": [
                                "brokerConfiguration",
                                "clusterConfiguration",
                                "consumerGroups",
                                "consumerGroupConfiguration",
                                "overrideTopicConfiguration",
                                "queueConfiguration",
                                "queueListing",
                                "schema",
                                "subscriptionConfiguration",
                                "topicConfiguration",
                                "topicListing"
                            ]
                        }
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the event broker scan.",
                        "readOnly": true,
                        "example": "COMPLETE",
                        "enum": [
                            "COMPLETE",
                            "FAILED",
                            "INITIATED",
                            "IN_PROGRESS",
                            "TIMED_OUT",
                            "TIMED_OUT_ON_INITIATION",
                            "TIMED_OUT_ON_NO_DATA",
                            "TIMED_OUT_ON_PARTIAL_DATA"
                        ]
                    },
                    "scanTypes": {
                        "type": "array",
                        "description": "The scan types for which the data is uploaded.",
                        "readOnly": true,
                        "example": "KAFKA_ALL",
                        "items": {
                            "type": "string",
                            "description": "The scan types for which the data is uploaded.",
                            "readOnly": true,
                            "example": "KAFKA_ALL",
                            "enum": [
                                "KAFKA_ALL",
                                "KAFKA_BROKER_CONFIGURATION",
                                "KAFKA_CLUSTER_CONFIGURATION",
                                "KAFKA_CONSUMER_GROUPS",
                                "KAFKA_CONSUMER_GROUPS_CONFIGURATION",
                                "KAFKA_FEATURES",
                                "KAFKA_PRODUCERS",
                                "KAFKA_TOPIC_CONFIGURATION",
                                "KAFKA_TOPIC_CONFIGURATION_FULL",
                                "KAFKA_TOPIC_LISTING",
                                "KAFKA_TOPIC_OVERRIDE_CONFIGURATION",
                                "CONFLUENT_SCHEMA_REGISTRY_SCHEMA",
                                "SOLACE_ALL",
                                "SOLACE_QUEUE_CONFIG",
                                "SOLACE_QUEUE_LISTING",
                                "SOLACE_SUBSCRIPTION_CONFIG"
                            ]
                        }
                    },
                    "destinations": {
                        "type": "array",
                        "description": "The data upload destination.",
                        "readOnly": true,
                        "example": "EVENT_PORTAL",
                        "items": {
                            "type": "string",
                            "description": "The data upload destination.",
                            "readOnly": true,
                            "example": "EVENT_PORTAL",
                            "enum": [
                                "EVENT_PORTAL",
                                "FILE_WRITER"
                            ]
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, ema data collection.",
                        "readOnly": true
                    }
                }
            },
            "EventManagementAgent": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "sdagkjlh32x"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EMA.",
                        "example": "primary event management agent"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region in which the EMA belongs to, extracted from the EventManagementAgentRegion.",
                        "readOnly": true,
                        "example": "North America"
                    },
                    "clientUsername": {
                        "type": "string",
                        "description": "The SMF username for a customer's EMA to use to communicate to event-portal.",
                        "readOnly": true,
                        "example": "sadhkjl2325sak"
                    },
                    "clientPassword": {
                        "type": "string",
                        "description": "The SMF password for a customer's EMA to use to communicate to event-portal.",
                        "readOnly": true,
                        "example": "SomePassword"
                    },
                    "referencedByMessagingServiceIds": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "description": "The list of messagingServiceIds user provides in GET APIs to filter the results.",
                            "readOnly": true,
                            "example": "[\"1kjdsf32\",\"9875ksdf\"]"
                        }
                    },
                    "orgId": {
                        "type": "string",
                        "description": "Used by admin APIs to get a list of EMAs against the given orgId",
                        "readOnly": true,
                        "example": "897xd32"
                    },
                    "status": {
                        "type": "string",
                        "description": "The connection status of EP to the actual EMA which this object represents.",
                        "readOnly": true,
                        "example": "Connected"
                    },
                    "lastConnectedTime": {
                        "type": "string",
                        "description": "The timestamp of last heartbeat received from the EMA",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the current connected EMA",
                        "readOnly": true,
                        "example": "1.1.2"
                    },
                    "runtimeAgentMode": {
                        "type": "string",
                        "description": "The mode in which the EMA operates.",
                        "readOnly": true,
                        "example": "Scan With Event Portal",
                        "enum": [
                            "scanWithEventPortal",
                            "uploadScanFile"
                        ]
                    },
                    "updateRequired": {
                        "type": "boolean",
                        "description": "Does this EMA require upgrade to latest released version.",
                        "readOnly": true,
                        "example": true
                    },
                    "eventManagementAgentRegionId": {
                        "type": "string",
                        "description": "The ID of the associated EventManagementAgentRegion.",
                        "example": "sdfkjh3242ds"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "EventManagementAgentRegion": {
                "required": [
                    "cloudProvider",
                    "host",
                    "msgVpn",
                    "name",
                    "region",
                    "serviceId"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The id of the service from maas-core.",
                        "example": "67890x23vh"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the EventManagementAgentRegion.",
                        "example": "primary region"
                    },
                    "cloudProvider": {
                        "type": "string",
                        "description": "The name of the cloud provider.",
                        "example": "AWS"
                    },
                    "region": {
                        "type": "string",
                        "description": "The name of the region.",
                        "example": "us-east"
                    },
                    "host": {
                        "type": "string",
                        "description": "The host name of the region.",
                        "example": "mr-connection-sdtwexd.messaging.solace.cloud"
                    },
                    "msgVpn": {
                        "type": "string",
                        "description": "The name of the region's msgVpn.",
                        "example": "fooivmr1"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The SMF port number.",
                        "format": "int32",
                        "example": 55443
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "updatedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    }
                }
            },
            "EventManagementAgentRegionsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventManagementAgentRegion"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "EventManagementAgentResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EventManagementAgent"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "EventManagementAgentsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventManagementAgent"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "EventMesh": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "name": {
                        "maxLength": 40,
                        "minLength": 1,
                        "type": "string",
                        "description": "The name of the event mesh.",
                        "example": "Inventory"
                    },
                    "environmentId": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The environmentId of the Event Mesh",
                        "example": "67890"
                    },
                    "description": {
                        "maxLength": 10000,
                        "minLength": 1,
                        "type": "string",
                        "description": "The description of the event mesh.",
                        "example": "The Inventory Event Meshapplications."
                    },
                    "brokerType": {
                        "type": "string",
                        "description": "The type of the broker used in the event mesh.",
                        "enum": [
                            "kafka",
                            "solace"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, eventMesh.",
                        "readOnly": true
                    }
                }
            },
            "EventMeshResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/EventMesh"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "EventMeshesResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/EventMesh"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "InvalidNonStateReference": {
                "type": "object",
                "properties": {
                    "entityId": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    }
                }
            },
            "InvalidStateReference": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "targetStateId": {
                                "type": "string"
                            },
                            "inboundInvalidNonStateReferences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InvalidNonStateReference"
                                }
                            },
                            "inboundInvalidStateReferences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InvalidStateReference"
                                }
                            },
                            "outboundInvalidStateReferences": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/InvalidStateReference"
                                }
                            },
                            "errorType": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "JsonNode": {
                "type": "object"
            },
            "KafkaConsumerGroupAuditResultSetDTO": {
                "type": "object",
                "properties": {
                    "aggregateAuditResult": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "kafkaConsumerGroupAuditResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Audit"
                        }
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "KafkaConsumerGroupAuditResultSetResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/KafkaConsumerGroupAuditResultSetDTO"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "KafkaConsumerGroupAuditResultSetsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KafkaConsumerGroupAuditResultSetDTO"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "KafkaTopicAuditResultSet": {
                "type": "object",
                "properties": {
                    "eventIds": {
                        "type": "array",
                        "readOnly": true,
                        "items": {
                            "type": "string",
                            "readOnly": true
                        }
                    },
                    "aggregateAuditResult": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "topicAudit": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "kafkaTopicSchemaParentRelationAuditResultSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KafkaTopicSchemaParentRelationAuditResultSet"
                        }
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "KafkaTopicAuditResultSetResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/KafkaTopicAuditResultSet"
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "KafkaTopicAuditResultSetsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KafkaTopicAuditResultSet"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "KafkaTopicSchemaParentRelationAuditResultSet": {
                "type": "object",
                "properties": {
                    "eventId": {
                        "type": "string",
                        "readOnly": true
                    },
                    "schemaParentAudit": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "kafkaTopicSchemaParentRelationAudit": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "kafkaTopicSchemaVersionRelationAuditResultSets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KafkaTopicSchemaVersionRelationAuditResultSet"
                        }
                    }
                }
            },
            "KafkaTopicSchemaVersionRelationAuditResultSet": {
                "type": "object",
                "properties": {
                    "eventVersionId": {
                        "type": "string"
                    },
                    "schemaVersionAudit": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "kafkaTopicSchemaVersionRelationAudit": {
                        "$ref": "#/components/schemas/Audit"
                    }
                }
            },
            "MessagingService": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "asdkl234x"
                    },
                    "eventMeshId": {
                        "type": "string",
                        "description": "The eventMeshId associated to the messaging service.",
                        "example": "67890x23vh"
                    },
                    "runtimeAgentId": {
                        "type": "string",
                        "description": "The runtimeAgentId associated to the messaging service.",
                        "example": "vh1234y14"
                    },
                    "solaceCloudMessagingServiceId": {
                        "type": "string",
                        "description": "The solaceCloudMessagingServiceId associated to the messaging service.",
                        "example": "abcd1234x"
                    },
                    "messagingServiceType": {
                        "type": "string",
                        "description": "The type of the messaging service.",
                        "example": "solace",
                        "enum": [
                            "solace",
                            "kafka"
                        ]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the messaging service.",
                        "example": "first messagingService"
                    },
                    "messagingServiceConnections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingServiceConnection"
                        }
                    },
                    "eventManagementAgentId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceAuthentication": {
                "required": [
                    "authenticationType",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "kjsfg32ds"
                    },
                    "messagingServiceConnectionId": {
                        "type": "string",
                        "description": "The ID of the connection object associated to the authentication object.",
                        "readOnly": true,
                        "example": "sdafgj23"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the authentication object.",
                        "example": "https auth details"
                    },
                    "authenticationType": {
                        "type": "string",
                        "description": "The type of the authentication object.",
                        "example": "basicAuthentication"
                    },
                    "authenticationDetails": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A JSON map containing a map of extra details for the authentication.",
                            "example": {
                                "broker owner": "Solace PE team"
                            }
                        },
                        "description": "A JSON map containing a map of extra details for the authentication.",
                        "example": {
                            "broker owner": "Solace PE team"
                        }
                    },
                    "messagingServiceCredentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingServiceCredentials"
                        }
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceConnection": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "5432dfg3"
                    },
                    "messagingServiceId": {
                        "type": "string",
                        "description": "The messagingServiceId associated to the connection object.",
                        "readOnly": true,
                        "example": "sdkjhg21948"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the connection object.",
                        "example": "my https connection"
                    },
                    "url": {
                        "type": "string",
                        "description": "The url of the connection object.",
                        "example": "https://abcd.messaging.solace.cloud:943"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol of the connection object.",
                        "example": "https"
                    },
                    "protocolVersion": {
                        "type": "string",
                        "description": "The protocolVersion of the connection object.",
                        "example": "2.0"
                    },
                    "bindings": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A JSON map containing a map of connection-specific values. ",
                            "example": {
                                "msgVpn": "myVPN"
                            }
                        },
                        "description": "A JSON map containing a map of connection-specific values. ",
                        "example": {
                            "msgVpn": "myVPN"
                        }
                    },
                    "messagingServiceAuthentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingServiceAuthentication"
                        }
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceCredentials": {
                "required": [
                    "credentials",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "lkjdsfgew2"
                    },
                    "messagingServiceAuthenticationId": {
                        "type": "string",
                        "description": "The ID of the authentication object associated to the credentials object.",
                        "readOnly": true,
                        "example": "sdafgj23"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the credentials object.",
                        "example": "basic auth credentials"
                    },
                    "credentials": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "description": "A JSON map containing the credentials information.",
                            "example": {
                                "username": "User1",
                                "password": "secretPass"
                            }
                        },
                        "description": "A JSON map containing the credentials information.",
                        "example": {
                            "username": "User1",
                            "password": "secretPass"
                        }
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceOperation": {
                "required": [
                    "scanTypes"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "kljhwe32"
                    },
                    "scanTypes": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The list of scanTypes to be scanned.",
                            "example": "[\"KAFKA_ALL\",\"CONFLUENT_SCHEMA_REGISTRY_SCHEMA\"]",
                            "enum": [
                                "KAFKA_ALL",
                                "CONFLUENT_SCHEMA_REGISTRY_SCHEMA",
                                "SOLACE_ALL"
                            ]
                        }
                    },
                    "destinations": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The list of destinations for EMA to send results to.",
                            "example": "[\"EVENT_PORTAL\",\"FILE_WRITER\"]",
                            "enum": [
                                "EVENT_PORTAL",
                                "FILE_WRITER"
                            ]
                        }
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceOperationResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessagingServiceOperation"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "MessagingServiceRemoveAssociation": {
                "type": "object",
                "properties": {
                    "association": {
                        "type": "string",
                        "description": "The target association to be removed from the messaging service.",
                        "example": "EVENT_MANAGEMENT_AGENT",
                        "enum": [
                            "RUNTIME_AGENT",
                            "EVENT_MESH",
                            "EVENT_MANAGEMENT_AGENT"
                        ]
                    }
                }
            },
            "MessagingServiceResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessagingService"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "MessagingServiceScan": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the messaging service scan.",
                        "readOnly": true,
                        "example": "FAILED"
                    },
                    "statusDescription": {
                        "type": "string",
                        "description": "The description of the messaging service scan status.",
                        "readOnly": true,
                        "example": "Scan failed because some scanTypes failed to complete."
                    },
                    "messagingServiceId": {
                        "type": "string",
                        "description": "The messagingServiceId of the scan.",
                        "readOnly": true,
                        "example": "67890x23vh"
                    },
                    "messagingServiceName": {
                        "type": "string",
                        "description": "The messagingServiceName of the scan.",
                        "readOnly": true,
                        "example": "first solace messagingService"
                    },
                    "scanTypes": {
                        "type": "string",
                        "description": "The scanTypes that were requested for the scan.",
                        "readOnly": true,
                        "example": "KAFKA_ALL"
                    },
                    "destinations": {
                        "type": "string",
                        "description": "The destinations which EMA will send the scan results.",
                        "readOnly": true,
                        "example": "EVENT_PORTAL,FILE_WRITER"
                    },
                    "isUsedByAudit": {
                        "type": "boolean",
                        "description": "Whether the scan is used by audit.",
                        "readOnly": true,
                        "example": false
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceScanData": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "scanId": {
                        "type": "string",
                        "description": "The ID of the scan.",
                        "readOnly": true,
                        "example": "67890x23vh"
                    },
                    "dataCollectionType": {
                        "type": "string",
                        "description": "The type of dataCollection this object holds scan data for.",
                        "readOnly": true,
                        "example": "consumerGroups",
                        "enum": [
                            "brokerConfiguration",
                            "clusterConfiguration",
                            "consumerGroups",
                            "consumerGroupConfiguration",
                            "overrideTopicConfiguration",
                            "queueConfiguration",
                            "queueListing",
                            "schema",
                            "subscriptionConfiguration",
                            "topicConfiguration",
                            "topicListing"
                        ]
                    },
                    "data": {
                        "type": "string",
                        "description": "The scan data in JSON format.",
                        "readOnly": true,
                        "example": "{\"name\":\"some solace queue name\"}"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceScanDataListResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingServiceScanData"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "MessagingServiceScanDataResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessagingServiceScanData"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "MessagingServiceScanLog": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "scanId": {
                        "type": "string",
                        "description": "The ID of the scan.",
                        "readOnly": true,
                        "example": "67890x23vh"
                    },
                    "log": {
                        "type": "string",
                        "description": "The log message.",
                        "readOnly": true,
                        "example": "The Scan Is Done."
                    },
                    "logLevel": {
                        "type": "string",
                        "description": "The level of the log message.",
                        "readOnly": true,
                        "example": "INFO"
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "MessagingServiceScanLogListResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingServiceScanLog"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "MessagingServiceScanResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MessagingServiceScan"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "MessagingServiceScansResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingServiceScan"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "MessagingServicesResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MessagingService"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "Pagination": {
                "type": "object",
                "properties": {
                    "pageNumber": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "pageSize": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "nextPage": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "totalPages": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ResourceConnectionResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resourceConnectionDetails"
                        }
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "ResourceCredentialOperationsBO": {
                "required": [
                    "orgId"
                ],
                "type": "object",
                "properties": {
                    "orgId": {
                        "type": "string"
                    },
                    "createdTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "updatedTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "changedBy": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "credentialDetailsId": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                },
                "description": "The list of credential operations."
            },
            "ResourceCredentialPropertiesBO": {
                "required": [
                    "orgId"
                ],
                "type": "object",
                "properties": {
                    "orgId": {
                        "type": "string"
                    },
                    "createdTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "updatedTime": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "changedBy": {
                        "type": "string"
                    },
                    "createdBy": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "credentialDetailsId": {
                        "type": "string"
                    },
                    "entityType": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    }
                },
                "description": "The list of credential properties."
            },
            "RuntimeAgentOperationDTO": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string"
                    },
                    "runtimeAgentId": {
                        "type": "string"
                    },
                    "messagingServiceId": {
                        "type": "string"
                    },
                    "scanType": {
                        "type": "string"
                    },
                    "entityTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "type": {
                        "type": "string"
                    }
                }
            },
            "RuntimeAgentOperationResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/RuntimeAgentOperationDTO"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "RuntimeEntityConfiguration": {
                "type": "object",
                "properties": {
                    "runtimeEntityType": {
                        "type": "string",
                        "enum": [
                            "solaceQueue"
                        ]
                    },
                    "configuration": {
                        "type": "string"
                    }
                }
            },
            "RuntimeMappingDTO": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "messagingServiceId": {
                        "type": "string"
                    },
                    "auditEntityType": {
                        "type": "string",
                        "enum": [
                            "all",
                            "kafkaConsumerGroup",
                            "kafkaConsumerGroupAggregate",
                            "kafkaTopic",
                            "kafkaTopicAggregate",
                            "schemaParent",
                            "schemaVersion",
                            "solaceQueue",
                            "solaceQueueAggregate",
                            "solaceTopic",
                            "kafkaTopicSchemaVersion",
                            "kafkaTopicSchemaParent"
                        ]
                    },
                    "identifier": {
                        "type": "string"
                    },
                    "attributes": {
                        "type": "string"
                    },
                    "scanId": {
                        "type": "string"
                    }
                },
                "readOnly": true
            },
            "SchemaRegistriesResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SchemaRegistry"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "SchemaRegistry": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "schemaRegistryType": {
                        "maxLength": 255,
                        "minLength": 1,
                        "type": "string",
                        "description": "The type of the Schema Registry.",
                        "enum": [
                            "confluent"
                        ]
                    },
                    "brokerType": {
                        "type": "string",
                        "description": "The type of the broker used in the event mesh.",
                        "enum": [
                            "kafka"
                        ]
                    },
                    "messagingServiceIds": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The messagingServiceIds associated with the Schema Registry",
                            "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
                        }
                    },
                    "connections": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resourceConnectionDetails"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, schemaRegistry.",
                        "readOnly": true
                    }
                }
            },
            "SchemaRegistryResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/SchemaRegistry"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "SolaceQueueAggregateResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/SolaceQueueAuditResultSetDTO"
                    },
                    "meta": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    }
                }
            },
            "SolaceQueueAuditResultSetDTO": {
                "type": "object",
                "properties": {
                    "aggregateAuditResult": {
                        "$ref": "#/components/schemas/Audit"
                    },
                    "solaceQueueAuditResults": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Audit"
                        }
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true
                    },
                    "type": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            },
            "SolaceQueueAuditResultSetsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SolaceQueueAuditResultSetDTO"
                        }
                    },
                    "meta": {
                        "$ref": "#/components/schemas/meta"
                    }
                }
            },
            "Tag": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "readOnly": true,
                        "example": "123456"
                    },
                    "name": {
                        "maxLength": 60,
                        "minLength": 0,
                        "type": "string",
                        "readOnly": true,
                        "example": "create"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, tag.",
                        "readOnly": true
                    }
                },
                "example": [
                    "To Be Created"
                ]
            },
            "meta": {
                "type": "object",
                "properties": {
                    "pagination": {
                        "$ref": "#/components/schemas/Pagination"
                    }
                }
            },
            "resourceAuthenticationDetails": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "protocol": {
                        "maxLength": 60,
                        "minLength": 0,
                        "type": "string",
                        "description": "The authentication protocol.",
                        "example": "SEMP"
                    },
                    "protocolVersion": {
                        "maxLength": 60,
                        "minLength": 0,
                        "type": "string",
                        "description": "The authentication protocol version.",
                        "example": "V2"
                    },
                    "connectionDetailsId": {
                        "type": "string",
                        "description": "The connection Id that the authentication object is associated to.",
                        "readOnly": true,
                        "example": "h5mk26hkm2"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resourceAuthenticationProperties"
                        }
                    },
                    "credentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resourceCredentialDetails"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, resourceAuthenticationDetails.",
                        "readOnly": true
                    }
                },
                "description": "The list of connection authentications."
            },
            "resourceAuthenticationProperties": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "name": {
                        "type": "string",
                        "description": "The property name.",
                        "example": "AuthenticationMethod"
                    },
                    "value": {
                        "type": "string",
                        "description": "The property value.",
                        "example": "oauth2.0"
                    },
                    "authenticationDetailsId": {
                        "type": "string",
                        "description": "The authentication Id the property is associated to.",
                        "readOnly": true,
                        "example": "h5mk26hkm2"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, resourceAuthenticationProperties.",
                        "readOnly": true
                    }
                },
                "description": "The list of authentication properties."
            },
            "resourceConnectionDetails": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "resourceId": {
                        "type": "string",
                        "description": "The id of the resource the connection object is associated to.",
                        "readOnly": true,
                        "example": "h5mk26hkm2"
                    },
                    "resourceType": {
                        "type": "string",
                        "description": "The type of the resource the connection object is associated to.",
                        "readOnly": true,
                        "enum": [
                            "schema"
                        ]
                    },
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The name of the connection object.",
                        "example": "my https connection"
                    },
                    "url": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The url of the connection object.",
                        "example": "https://abcd.messaging.solace.cloud:943 OR http://localhost:8081"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resourceConnectionProperties"
                        }
                    },
                    "authentications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/resourceAuthenticationDetails"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, resourceConnection.",
                        "readOnly": true
                    }
                }
            },
            "resourceConnectionProperties": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "name": {
                        "type": "string",
                        "description": "The property name.",
                        "example": "vpn"
                    },
                    "value": {
                        "type": "string",
                        "description": "The property value.",
                        "example": "my-personal-vpn"
                    },
                    "connectionDetailsId": {
                        "type": "string",
                        "description": "The connection Id the property is associated to.",
                        "readOnly": true,
                        "example": "h5mk26hkm2"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, resourceConnectionProperties.",
                        "readOnly": true
                    }
                },
                "description": "The list of connection properties."
            },
            "resourceCredentialDetails": {
                "type": "object",
                "properties": {
                    "createdTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "updatedTime": {
                        "type": "string",
                        "readOnly": true,
                        "example": "2021-12-31T20:30:57.920Z"
                    },
                    "createdBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "changedBy": {
                        "type": "string",
                        "readOnly": true,
                        "example": "12345678"
                    },
                    "id": {
                        "type": "string",
                        "description": "Primary key set by the server.",
                        "readOnly": true,
                        "example": "12345"
                    },
                    "source": {
                        "maxLength": 255,
                        "minLength": 0,
                        "type": "string",
                        "description": "The credential source.",
                        "example": "keyStore"
                    },
                    "authenticationDetailsId": {
                        "type": "string",
                        "description": "The authentication Id the credential object is associated to.",
                        "readOnly": true,
                        "example": "h5mk26hkm2"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceCredentialPropertiesBO"
                        }
                    },
                    "operations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ResourceCredentialOperationsBO"
                        }
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of this payload, resourceCredentialDetails.",
                        "readOnly": true
                    }
                },
                "description": "The list of credential details."
            }
        },
        "securitySchemes": {
            "APIToken": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "x-readme": {
        "explorer-enabled": true,
        "proxy-enabled": true,
        "samples-enabled": true
    }
}