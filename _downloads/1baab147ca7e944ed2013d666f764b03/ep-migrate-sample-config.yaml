#############################################################
# Sample Config file for CLI: ep-migrate
#############################################################

logger:
  # logSummary2Console:
  # - options: true, false
  # - logs summary status of migrate actions to console
  logSummary2Console: true
  # logLevel: 
  # - options: trace, debug, info, warn, error, fatal
  logLevel: info
  # logFile:
  # - relative or absolute path + file name of log file
  logFile: ./logs/ep-migrate.log
  # prettyPrint:
  # - options: true, false
  # - true: 
  #   pretty print JSON in all logs (console/log file)
  # - false:
  #   each log entry is on 1 line 
  prettyPrint: true
  # log2Stdout:
  # - options: true, false
  # - log also to console
  log2Stdout: false
  # epSdkLogLevel:
  # - options: trace, debug, info, warn, error, fatal, silent
  # - log level for EpSdk library
  # - Note: 'epSdkLogLevel' greater than 'logLevel' will be discarded, i.e. 'logLevel' setting prevails.
  epSdkLogLevel: silent
epV1:
  apiUrl: https://api.solace.cloud
  token: ${EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V1}
epV2:
  apiUrl: https://api.solace.cloud
  token: ${EP_MIGRATE_CLI_SOLACE_CLOUD_TOKEN_V2}
migrate:
  epV1:
    # applicationDomainNames:
    # - include:
    #   list of application domain names included in the migration
    # - exclude:
    #   list of application domain names excluded from the migration
    # If the resulting list is empty, the CLI will migrate all application domains.
    # Note:
    #  The CLI will NOT pull through any referenced objects/versions that are not part of a selected 
    #  Application Domain. An missing reference issue will be created during the run.
    applicationDomainNames:
      include: 
      - "My Domain One"
      - "My Domain Two"
      exclude:
      - "My Domain Three"
  epV2:
    # applicationDomainPrefix:
    # - optional
    # - if specified, prepends applicationDomainPrefix to all created applicationDomains
    applicationDomainPrefix: 'epV1/'
    # versions:
    # - required
    # - applies to all objects
    # - can override by object
    versions:
      # initialVersion:
      # - format: simple, three part SemVer (e.g. 1.0.0)
      # - the version when version object is first created
      # - any mods of existing version, versionStrategy is applied
      initialVersion: 1.0.0
      # versionStrategy:
      # - version bump when existing version is found and any mods are applied to new version
      # - options: bump_patch, bump_minor
      versionStrategy: bump_patch
      # state: options=Released, Draft
      #   Note: You can change the state on a per object basis.
      #   Bear in mind, that any version referencing a Draft version cannot be set to Released.
      #   Example: Enums are set to Draft, Events are set to Released. Migrating any Event referencing an Enum will result in an issue logged.
      state: Draft
  enums:
    epV2:
      applicationDomainName: 'enums'
      versions:
        initialVersion: 1.0.0
        versionStrategy: bump_patch
        state: Released
  applicationDomains:
    epV2:
  schemas:
    epV2:
      versions:
        initialVersion: 1.0.0
        versionStrategy: bump_patch
        state: Released
  events:
    epV2:
      versions:
        initialVersion: 1.0.0
        versionStrategy: bump_patch
        state: Released
  applications:
    epV2:
      # environment:
      # - optional
      # - if specified, applications will be added to the specified runtime environment
      # - this is required to see a graphical representation of the topology
      environment:
        # environment must exist in Ep V2
        environmentName: 'epV1Migration'
        # event mesh must exist in Ep V2
        eventMeshName: 'epV1Migration'
        # broker must exist in Ep V2
        eventBrokerName: 'epV1Migration'
      versions:
        initialVersion: 1.0.0
        versionStrategy: bump_patch
        state: Released

  
#############################################################
